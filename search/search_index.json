{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"C# Dokumentation","text":"<p>Diese Webseite bietet eine umfassende \u00dcbersicht \u00fcber C# und deckt wichtige Themen wie Grundlagen, Oberfl\u00e4chenprogrammierung mit WPF, Datenbankanbindung, Reflection und Spieleentwicklung ab. </p>"},{"location":"index.html#themenubersicht","title":"Themen\u00fcbersicht:","text":"<ul> <li>Grundlagen: Einf\u00fchrung in Strings, Schleifen, Events und Dateiverarbeitung.</li> <li>Oberfl\u00e4chenprogrammierung (WPF): Grundlagen, Elemente und Datenbindung.</li> <li>Datenbankanbindung: Installation, Verbindung, Daten lesen und schreiben.</li> <li>Reflection: Dynamische Ermittlung von Datentypen und Erstellung von Objekten.</li> <li>Spieleentwicklung: Projektsetup, Spielobjekte und Eventmanagement.</li> </ul>"},{"location":"db/index.html","title":"Datenbankanbindung in C#","text":"<p>In der modernen Softwareentwicklung spielt die Datenbankanbindung eine zentrale Rolle, besonders wenn es um die Entwicklung von Anwendungen geht, die auf dynamischen, persistenten Datenstrukturen basieren. C# als eine der f\u00fchrenden Programmiersprachen im .NET-Framework von Microsoft bietet robuste L\u00f6sungen f\u00fcr die Datenbankintegration. Eine der g\u00e4ngigen Methoden, um eine solche Integration zu realisieren, ist die Verwendung des <code>MySql.Data</code>-Pakets. Dieses Paket erm\u00f6glicht es Entwicklern, C#-Anwendungen nahtlos mit MySQL-Datenbanken zu verbinden, indem es eine direkte Schnittstelle zu MySQL bietet. Die Notwendigkeit einer Datenbankanbindung in C# ergibt sich aus dem Bedarf, Daten effizient zu speichern, abzurufen und zu manipulieren. Egal ob es um die Verwaltung von Benutzerdaten, die Durchf\u00fchrung von Transaktionen oder das Reporting geht, eine zuverl\u00e4ssige Datenbankverbindung ist essentiell, um die Integrit\u00e4t und Leistungsf\u00e4higkeit der Anwendung zu gew\u00e4hrleisten. In dieser Anleitung werden wir uns darauf konzentrieren, wie man mithilfe des <code>MySql.Data</code>-Pakets eine solche Anbindung realisiert, um eine solide Grundlage f\u00fcr die Entwicklung datenbankgest\u00fctzter C#-Anwendungen zu schaffen.</p>"},{"location":"db/beispiel.html","title":"Beispiel","text":"<p>Hier ist ein vollst\u00e4ndiges C#-Beispiel, das den Aufbau einer Verbindung zu einer MySQL-Datenbank, das Schreiben von Daten in eine Tabelle und das anschlie\u00dfende Lesen dieser Daten demonstriert. Dieses Beispiel setzt voraus, dass Sie bereits das <code>MySql.Data</code>-Paket installiert haben und eine Tabelle namens <code>person</code> in Ihrer Datenbank existiert, die Felder wie <code>id</code>, <code>Vorname</code>, <code>Nachname</code>, <code>GebDatum</code> und <code>Gehalt</code> enth\u00e4lt.</p> <pre><code>using System;\nusing MySql.Data.MySqlClient;\n\nnamespace MySQLConnectionExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string connectionString = \"Server=bszw.ddns.net;Database=xxx;Uid=yyy;Pwd=zzz;\";\n\n            using (MySqlConnection con = new MySqlConnection(connectionString))\n            {\n                try\n                {\n                    // Schreiben von Daten in die Datenbank\n                    string insertQuery = @$\"INSERT INTO person ({p.Id}, {p.Vorname}, {p.Nachname}, {p.GebDatum}, {p.Gehalt}) \n                       VALUES (id, Vorname, Nachname, GebDatum, Gehalt)\";\n\n                    using (MySqlCommand cmd = new MySqlCommand(insertQuery, con))\n                    {\n                        cmd.ExecuteNonQuery();\n                        Console.WriteLine(\"Datensatz erfolgreich hinzugef\u00fcgt.\");\n                    }\n\n                    // Lesen von Daten aus der Datenbank\n                    string selectQuery = \"SELECT * FROM person\";\n                    using (MySqlCommand cmd = new MySqlCommand(selectQuery, con))\n                    using (MySqlDataReader rdr = cmd.ExecuteReader())\n                    {\n                        while (rdr.Read())\n                        {\n                            int id = rdr.GetInt32(\"id\");\n                            string vorname = rdr.GetString(\"Vorname\");\n                            string nachname = rdr.GetString(\"Nachname\");\n                            DateTime gebDatum = rdr.GetDateTime(\"GebDatum\");\n                            double gehalt = rdr.GetDouble(\"Gehalt\");\n\n                            Console.WriteLine($\"{id} {nachname} {vorname} {gebDatum.ToShortDateString()} {gehalt}\");\n                        }\n                    }\n                }\n                catch (MySqlException e)\n                {\n                    Console.WriteLine($\"Fehler: {e.Message}\");\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Dieses Beispiel umfasst:</p> <ol> <li>Verbindungsaufbau: Zu Beginn wird eine Verbindung zur MySQL-Datenbank hergestellt.</li> <li>Schreiben von Daten: Es werden Daten in die <code>person</code>-Tabelle eingef\u00fcgt. Beachten Sie die Verwendung von Parametern im SQL-Befehl zur Vermeidung von SQL-Injection.</li> <li>Lesen von Daten: Anschlie\u00dfend werden die Daten mit einem SELECT-Befehl abgerufen und ausgegeben.</li> <li>Verbindungsmanagement: Die Verwendung des <code>using</code>-Statements sorgt daf\u00fcr, dass die Verbindung und andere Ressourcen korrekt freigegeben werden, unabh\u00e4ngig davon, ob der Vorgang erfolgreich war oder ein Fehler aufgetreten ist.</li> </ol> <p>Stellen Sie sicher, dass Sie die Verbindungszeichenfolge entsprechend Ihrer Datenbankkonfiguration anpassen und die richtigen Werte f\u00fcr Server, Datenbank, Benutzer-ID und Passwort verwenden.</p>"},{"location":"db/datanbankanbindung.html","title":"Installation des MySql.Data-Pakets \u00fcber den NuGet Package Manager","text":"<p>Die Integration von MySQL-Datenbanken in C#-Anwendungen erfordert das <code>MySql.Data</code>-Paket, das einfach \u00fcber den NuGet Package Manager in Visual Studio installiert werden kann. Der NuGet Package Manager ist ein essentielles Tool in Visual Studio, das die Verwaltung von Paketen in Ihren Projekten vereinfacht. Um das MySql.Data-Paket zu installieren, folgen Sie diesen Schritten:</p> <ol> <li> <p>\u00d6ffnen des NuGet Package Managers: Starten Sie Visual Studio und \u00f6ffnen Sie Ihre L\u00f6sung (Solution). Navigieren Sie im Hauptmen\u00fc zu <code>Tools</code> &gt; <code>NuGet Package Manager</code> &gt; <code>Manage NuGet Packages for Solution...</code>. Dies \u00f6ffnet den NuGet Package Manager f\u00fcr Ihre L\u00f6sung.</p> </li> <li> <p>Suchen des <code>MySql.Data-Pakets</code>: Im NuGet Package Manager, wechseln Sie zum Browse-Tab. Geben Sie in das Suchfeld \u201eMySql\u201c ein. Die Suche liefert verschiedene Pakete, einschlie\u00dflich <code>MySql.Data</code>.</p> </li> <li> <p>Auswahl und Installation: Klicken Sie auf das <code>MySql.Data</code>-Paket in den Suchergebnissen. Auf der linken Seite werden die Projekte (Solutions) angezeigt, zu denen Sie das Paket hinzuf\u00fcgen k\u00f6nnen. Setzen Sie einen Haken bei der Solution, in der Sie das Paket verwenden m\u00f6chten, und klicken Sie auf Install. Visual Studio wird nun das Paket herunterladen und installieren. Dieser Vorgang kann einige Momente in Anspruch nehmen.</p> </li> <li> <p>Verwendung im Code: Nach der erfolgreichen Installation k\u00f6nnen Sie das MySql.Data-Paket in Ihrem C#-Projekt verwenden. Dazu m\u00fcssen Sie nur die entsprechenden using-Direktiven zu Ihren C#-Dateien hinzuf\u00fcgen, um auf die Funktionalit\u00e4ten des Pakets zugreifen zu k\u00f6nnen.</p> </li> </ol> <p>Durch die Installation des <code>MySql.Data</code>-Pakets \u00fcber den NuGet Package Manager stellen Sie sicher, dass Ihr Projekt alle notwendigen Abh\u00e4ngigkeiten besitzt, um eine Verbindung zu MySQL-Datenbanken herzustellen und zu verwalten. Dies ist der erste Schritt, um die Kraft von MySQL in Ihren C#-Anwendungen zu nutzen.</p> <p>Nach der Installation sollte das Paket im Reiter <code>Installed</code> angezeigt werden:</p> <p></p> <p>Jetzt kann das Paket mittels using-Direktive am Anfang des Codes verwendet werden:</p> <pre><code>using MySql.Data.MySqlClient;\n</code></pre>"},{"location":"db/daten-lesen.html","title":"Lesen von Daten aus der Datenbank","text":"<p>Nachdem eine Verbindung zur MySQL-Datenbank erfolgreich hergestellt wurde, ist der n\u00e4chste Schritt oft das Lesen von Daten. Dies kann durch Ausf\u00fchren eines SQL-Befehls mit einem <code>MySqlCommand</code>-Objekt und dem Abrufen der Ergebnisse durch einen <code>MySqlDataReader</code> erfolgen. Hier ist ein einfaches Beispiel, das zeigt, wie Daten aus einer Tabelle namens <code>person</code> gelesen werden k\u00f6nnen:</p> <pre><code>MySqlCommand cmd = new MySqlCommand(\"SELECT * FROM person\", con);\nMySqlDataReader rdr = cmd.ExecuteReader();\n\nwhile (rdr.Read())\n{\n    int id = rdr.GetInt32(\"Id\");\n    string vn = rdr.GetString(\"Vorname\");\n    string nn = rdr.GetString(\"Nachname\");\n    DateTime datum = rdr.GetDateTime(\"GebDatum\");\n    double gehalt = rdr.GetDouble(\"Gehalt\");\n\n    Console.WriteLine($\"{id} {nn} {vn} {datum.ToShortDateString()} {gehalt}\");\n}\n\nrdr.Close();\n</code></pre> <p>In diesem Beispiel f\u00fchrt <code>cmd.ExecuteReader()</code> den SQL-Befehl <code>SELECT * FROM person</code> aus und gibt einen <code>MySqlDataReader</code> (<code>rdr</code>) zur\u00fcck, der die Daten enth\u00e4lt. Die <code>while</code>-Schleife mit <code>rdr.Read()</code> iteriert \u00fcber alle Datens\u00e4tze im Ergebnis. Innerhalb der Schleife k\u00f6nnen Sie auf die einzelnen Spaltenwerte des aktuellen Datensatzes zugreifen, indem Sie die entsprechenden <code>Get...</code>-Methoden des <code>MySqlDataReader</code> verwenden, z.B. <code>GetInt32</code> f\u00fcr Integer, <code>GetString</code> f\u00fcr String-Werte, <code>GetDateTime</code> f\u00fcr Datumswerte und <code>GetDouble</code> f\u00fcr Gleitkommazahlen. Diese Werte werden dann in der Konsole ausgegeben.</p> <p>Es ist wichtig, den <code>MySqlDataReader</code> nach Gebrauch mit <code>rdr.Close()</code> zu schlie\u00dfen, um Ressourcen freizugeben. Alternativ k\u00f6nnen Sie auch das <code>using</code>-Statement verwenden, das den <code>MySqlDataReader</code> automatisch schlie\u00dft, sobald der Block abgeschlossen ist:</p> <pre><code>using (MySqlCommand cmd = new MySqlCommand(\"SELECT * FROM person\", con))\nusing (MySqlDataReader rdr = cmd.ExecuteReader())\n{\n    while (rdr.Read())\n    {\n        // Verarbeiten der Daten wie oben\n    }\n}\n</code></pre> <p>Dieser Ansatz stellt sicher, dass alle Ressourcen ordnungsgem\u00e4\u00df bereinigt werden und ist besonders n\u00fctzlich in Szenarien, wo mehrere Datenbankoperationen durchgef\u00fchrt werden und die \u00dcbersichtlichkeit des Codes gewahrt bleiben soll.</p>"},{"location":"db/daten-schreiben.html","title":"Schreiben von Daten in die Datenbank","text":"<p>Das Einf\u00fcgen neuer Daten in eine MySQL-Datenbank ist ein grundlegender Bestandteil der Interaktion mit relationalen Datenbanken. In C# kann dies effizient mit einem <code>MySqlCommand</code>-Objekt erreicht werden, das einen SQL-Insert-Befehl ausf\u00fchrt. Hier ist ein Beispiel, wie Sie Daten in die Tabelle <code>person</code> schreiben k\u00f6nnen, die Felder wie <code>id</code>, <code>Vorname</code>, <code>Nachname</code>, <code>GebDatum</code> und <code>Gehalt</code> enth\u00e4lt:</p> <pre><code>// Anlegen einer Beispielperson\nPerson p = new Person(...);\n\n// Hier wird der SQL-Befehl zusammengesetzt\nstring insertQuery = @$\"INSERT INTO person ({p.Id}, {p.Vorname}, {p.Nachname}, {p.GebDatum}, {p.Gehalt}) \n                       VALUES (id, Vorname, Nachname, GebDatum, Gehalt)\";\n\n// Zuerst den Command erstellen\nusing (MySqlCommand cmd = new MySqlCommand(insertQuery, con))\n{\n    // F\u00fchrt den Insert-Befehl aus\n    cmd.ExecuteNonQuery(); \n}\n</code></pre> <p>In diesem Beispiel wird der SQL-Insert-Befehl als String mit Werten vorbereitet.</p> <p>Das Ausf\u00fchren des Befehls erfolgt durch Aufrufen von <code>cmd.ExecuteNonQuery()</code>. Diese Methode ist ideal f\u00fcr SQL-Statements, die keine Daten zur\u00fcckgeben, wie INSERT, UPDATE oder DELETE. Vor dem Ausf\u00fchren des Insert-Befehls sollte sichergestellt werden, dass die Datenbankverbindung ge\u00f6ffnet ist (<code>con.Open()</code>).</p>"},{"location":"db/verbindung.html","title":"Herstellung der Verbindung zur Datenbank","text":"<p>Nach der Installation des <code>MySql.Data</code>-Pakets ist der n\u00e4chste Schritt die Herstellung einer Verbindung zu Ihrer MySQL-Datenbank. Die Verbindung wird \u00fcber einen Verbindungsstring definiert und mit Hilfe eines <code>MySqlConnection</code>-Objekts verwaltet. Hier ist ein grundlegendes Beispiel, wie Sie eine solche Verbindung aufbauen k\u00f6nnen:</p> <pre><code>string constr = \"Server=bszw.ddns.net;Database=xxx;Uid=yyy;Pwd=zzz;\";\nMySqlConnection con = new MySqlConnection(constr);\ncon.Open();\n</code></pre> <p>In diesem Beispiel ist <code>constr</code> der Verbindungsstring, der die notwendigen Informationen f\u00fcr die Verbindung zur Datenbank enth\u00e4lt: den Servernamen (<code>Server</code>), den Datenbanknamen (<code>Database</code>), den Benutzernamen (<code>Uid</code>) und das Passwort (<code>Pwd</code>). Diese Informationen sollten entsprechend Ihrer Datenbankkonfiguration angepasst werden.</p> <p>Es ist entscheidend, dass die Datenbankverbindung ordnungsgem\u00e4\u00df verwaltet wird, insbesondere im Fehlerfall. Eine nicht geschlossene Verbindung kann zu Speicherlecks und anderen Problemen f\u00fchren. Es gibt zwei g\u00e4ngige Muster, um sicherzustellen, dass die Verbindung immer ordnungsgem\u00e4\u00df geschlossen wird: <code>try-catch-finally</code> und <code>using</code>.</p>"},{"location":"db/verbindung.html#verwendung-von-try-catch-finally","title":"Verwendung von <code>try-catch-finally</code>","text":"<p>Das <code>try-catch-finally</code>-Muster erm\u00f6glicht es Ihnen, die Verbindung in einem gesch\u00fctzten Block zu \u00f6ffnen und sicherzustellen, dass die Verbindung im <code>finally</code>-Block geschlossen wird, unabh\u00e4ngig davon, ob ein Fehler auftritt oder nicht:</p> <pre><code>try\n{\n    con.Open();\n    // Datenbankoperationen hier\n}\ncatch (MySqlException e)\n{\n    // Fehlerbehandlung hier\n}\nfinally\n{\n    con.Close();\n}\n</code></pre>"},{"location":"db/verbindung.html#verwendung-von-using","title":"Verwendung von <code>using</code>","text":"<p>Das <code>using</code>-Statement bietet eine saubere und effiziente Methode, um Ressourcen automatisch freizugeben, sobald der Block abgeschlossen ist. Im Fall von <code>MySqlConnection</code> wird die Verbindung automatisch geschlossen, wenn der <code>using</code>-Block verlassen wird:</p> <pre><code>using (MySqlConnection con = new MySqlConnection(constr))\n{\n    con.Open();\n    // Datenbankoperationen hier\n}\n</code></pre> <p>Beide Methoden sind effektiv, um sicherzustellen, dass die Datenbankverbindung ordnungsgem\u00e4\u00df geschlossen wird. Die Wahl zwischen <code>try-catch-finally</code> und <code>using</code> h\u00e4ngt von Ihren spezifischen Anforderungen und dem Kontext Ihres Codes ab. Im Allgemeinen bietet das <code>using</code>-Statement eine k\u00fcrzere und klarere Syntax, w\u00e4hrend <code>try-catch-finally</code> mehr Flexibilit\u00e4t bei der Fehlerbehandlung bietet.</p>"},{"location":"gamedev/index.html","title":"Spieleentwicklung","text":"<p>Die Spieleentwicklung ist ein kreativer und technischer Prozess, bei dem interaktive Anwendungen, meist in Form von Videospielen, entwickelt werden. Dieser Prozess umfasst verschiedene Phasen wie Konzeption, Design, Programmierung, Testen und Ver\u00f6ffentlichung. Der Erfolg eines Spiels h\u00e4ngt von vielen Faktoren ab, darunter Grafik, Gameplay, Sounddesign und Storytelling.</p>"},{"location":"gamedev/index.html#game-engines","title":"Game Engines","text":"<p>Eine Game Engine ist eine Software-Framework, das Entwicklern Werkzeuge und Funktionen zur Verf\u00fcgung stellt, um die Entwicklung von Spielen zu erleichtern. Zu den bekanntesten Game Engines geh\u00f6ren Unity, Unreal Engine und Godot. Game Engines bieten zahlreiche Vorteile:</p> <ul> <li>Wiederverwendbare Komponenten: Entwickler k\u00f6nnen auf eine Vielzahl von vorgefertigten Komponenten zugreifen, die h\u00e4ufig in Spielen verwendet werden, wie z.B. Physik-Engines, Grafik-Renderern und Audio-Engines.</li> <li>Plattformunabh\u00e4ngigkeit: Viele Game Engines erm\u00f6glichen die Ver\u00f6ffentlichung von Spielen auf mehreren Plattformen, wie Windows, macOS, Linux, iOS, Android und Konsolen.</li> <li>Effizienz und Geschwindigkeit: Durch die Verwendung von Game Engines k\u00f6nnen Entwickler den Entwicklungsprozess beschleunigen und sich auf die kreativen Aspekte der Spieleentwicklung konzentrieren.</li> </ul>"},{"location":"gamedev/index.html#spieleentwicklung-mit-godot","title":"Spieleentwicklung mit Godot","text":"<p>In diesem Abschnitt betrachten wir die Grundlagen der Spieleentwicklung mit Godot. Godot ist eine leistungsf\u00e4hige, freie und quelloffene Game Engine, die eine Vielzahl von Werkzeugen und Funktionen bietet, um 2D- und 3D-Spiele zu entwickeln. Der Hauptvorteil von Godot ist seine Flexibilit\u00e4t und Benutzerfreundlichkeit, die sowohl Anf\u00e4ngern als auch erfahrenen Entwicklern zugutekommt.</p>"},{"location":"gamedev/index.html#grundlegende-konzepte","title":"Grundlegende Konzepte","text":"<p>Bevor wir mit der praktischen Entwicklung beginnen, ist es wichtig, einige grundlegende Konzepte der Spieleentwicklung mit Godot zu verstehen:</p> <ul> <li>Szenen und Nodes: Godot verwendet ein Szenen- und Nodes-System, bei dem jede Szene aus einer Hierarchie von Nodes besteht. Nodes sind grundlegende Bausteine, die verschiedene Funktionen erf\u00fcllen, wie z.B. Sprites, Kollisionsobjekte und Skripte.</li> <li>Skripting: Godot unterst\u00fctzt verschiedene Skriptsprachen, darunter GDScript, VisualScript und C#. In diesem Projekt werden wir C# verwenden, um unsere Spielelogik zu implementieren.</li> <li>Ressourcen: Ressourcen wie Texturen, Sounds und Skripte k\u00f6nnen in Godot einfach verwaltet und in verschiedenen Szenen wiederverwendet werden.</li> </ul>"},{"location":"gamedev/index.html#godot-ohne-oberflache","title":"Godot ohne Oberfl\u00e4che","text":"<p>Obwohl Godot eine benutzerfreundliche grafische Benutzeroberfl\u00e4che bietet, werden wir in diesem Projekt ausschlie\u00dflich mit einem vorgefertigten Projekt und C# arbeiten. Dies erm\u00f6glicht eine effizientere und fokussiertere Entwicklungserfahrung, insbesondere f\u00fcr Entwickler, die bereits mit C# vertraut sind.</p> <p>Im Folgenden werden wir Schritt f\u00fcr Schritt durch den Entwicklungsprozess gef\u00fchrt und dabei die wichtigsten Aspekte der Spieleentwicklung mit Godot und C# beleuchten.</p> <p>In den n\u00e4chsten Abschnitten werden wir uns mit den praktischen Aspekten der Spieleentwicklung befassen, darunter die Einrichtung des Projekts, die Erstellung grundlegender Spielmechaniken und die Implementierung von Spielressourcen.</p> <p>Wir beginnen mit der Einrichtung unseres Godot-Projekts und der Integration von C#.</p>"},{"location":"gamedev/einrichtung.html","title":"Erste Schritte","text":""},{"location":"gamedev/einrichtung.html#download-von-godot","title":"Download von Godot","text":"<p>Um mit der Spieleentwicklung zu beginnen, ben\u00f6tigen wir die Godot Engine. Die Spieleengine kann unter folgendem Link heruntergeladen werden: Godot Engine - Download f\u00fcr Windows. </p> <p>Warning</p> <p>Stellen Sie sicher, dass Sie die Godot Engine - .NET Version herunterladen, da wir C# f\u00fcr die Entwicklung verwenden werden.</p>"},{"location":"gamedev/einrichtung.html#schritte-zum-herunterladen-und-speichern","title":"Schritte zum Herunterladen und Speichern:","text":"<ol> <li>Besuchen Sie die Godot Download-Seite f\u00fcr Windows.</li> <li>Laden Sie die Godot Engine - .NET Version herunter.</li> <li>Entpacken Sie die heruntergeladenen Dateien auf Ihrem System.</li> </ol> <p>Das Programm muss nicht installiert werden. Den heruntergeladenen Ordner k\u00f6nnen Sie an einem beliebigen Ort auf Ihrem System speichern, damit Sie sp\u00e4ter darauf zugreifen k\u00f6nnen.</p> <p>Info</p> <p>Es ist ratsam, den Speicherort des Ordners nicht zu \u00e4ndern, nachdem Sie ihn festgelegt haben, um Probleme beim Pfadzugriff zu vermeiden.</p>"},{"location":"gamedev/einrichtung.html#einrichtung-des-projekts","title":"Einrichtung des Projekts","text":"<p>Wir erstellen das gesamte Spiel in einem C#-Projekt, ohne die Verwendung der Godot-IDE. Hierf\u00fcr gibt es ein bereits vorgefertigtes Projekt. Beziehen Sie dieses von der Dateiablage.</p>"},{"location":"gamedev/einrichtung.html#debugging-aktivieren","title":"Debugging aktivieren","text":"<p>Um die M\u00f6glichkeit zum Debugging zu aktivieren, gehen wir wie folgt vor:</p> <ol> <li>Unter dem Reiter \"Debug\" w\u00e4hlen wir den letzten Punkt \"Debug Properties\".</li> <li>Danach f\u00fcgen wir durch Klick auf den Reiter oben Links ein neues Profil hinzu. Dort w\u00e4hlen wir \"Executable\" aus und stellen sicher, dass dieses Profil ausgew\u00e4hlt ist.</li> <li>Danach f\u00fcgen wir unter \"Path to the executable to run.\" den Pfad zu Godot ein.</li> <li>Im Anschluss definieren wir unter \"Command line arguments\" die Argumente <code>--path . --verbose</code>. <ul> <li><code>--path .</code> legt fest, dass der Pfad zum Projekt der aktuelle ist (<code>.</code>).</li> <li>Durch das Argument <code>--verbose</code> werden alle m\u00f6glichen Fehler zur Laufzeit des Programms ausgegeben.</li> </ul> </li> <li>Unter \"Working directory\" tragen wir einen Punkt <code>.</code> ein. Damit sagen wir der Anwendung, dass das Arbeitsverzeichnis auch das aktuelle ist.</li> </ol> <p>Alle anderen Einstellungen bleiben leer, es wird auch sonst nichts angehakt.</p> <p>Hier ein Beispiel, wie die Einstellungen aussehen sollten:</p> <p></p> <p>Warning</p> <p>Achten Sie darauf, den korrekten Pfad zur Godot-Executable anzugeben, um Fehler beim Starten des Debuggings zu vermeiden.</p> <p>Nachdem diese Einstellungen vorgenommen wurden, ist das Projekt bereit f\u00fcr das Debugging, und wir k\u00f6nnen mit der Implementierung der Spielelogik fortfahren.</p> <p>Starten Sie nun die Anwendung mit dem eben erstellten Profil:</p> <p></p> <p>Wurden die Einstellungen richtig vorgenommen, sollte das Programm nun starten und Sie sollten ein leeres Fenster sehen.</p> <p></p>"},{"location":"gamedev/godot_events.html","title":"Verwendung von Signalen in Godot","text":"<p>Godot verwendet ein Signalsystem (Events), um Ereignisse zu handhaben und Kommunikation zwischen Nodes zu erm\u00f6glichen. Signale sind ein wichtiges Konzept in Godot, da sie eine flexible und entkoppelte Art der Interaktion zwischen verschiedenen Teilen des Spiels bieten.</p>"},{"location":"gamedev/godot_events.html#grundlagen-von-signalen","title":"Grundlagen von Signalen","text":"<p>Signale sind benutzerdefinierte oder eingebaute Ereignisse, die von Nodes gesendet werden und von anderen Nodes empfangen werden k\u00f6nnen. Sie erm\u00f6glichen es, auf bestimmte Ereignisse zu reagieren, ohne dass die beteiligten Nodes direkt miteinander kommunizieren m\u00fcssen.</p>"},{"location":"gamedev/godot_events.html#beispiel-verwendung-von-signalen","title":"Beispiel: Verwendung von Signalen","text":"<p>In diesem Beispiel erstellen wir eine einfache Anwendung, in der ein Signal ausgel\u00f6st wird, wenn die Leertaste gedr\u00fcckt wird. Das Signal wird in der <code>Root</code>-Klasse verkn\u00fcpft, und eine andere Node reagiert auf dieses Signal.</p>"},{"location":"gamedev/godot_events.html#schritt-1-signal-deklarieren-und-auslosen","title":"Schritt 1: Signal deklarieren und ausl\u00f6sen","text":"<p>Zuerst deklarieren wir ein Signal in einer benutzerdefinierten Node-Klasse und l\u00f6sen es aus, wenn eine Bedingung erf\u00fcllt ist.</p> <pre><code>using Godot;\nusing System;\n\npublic partial class SpaceShip : Node2D\n{\n    // Deklariert ein Signal\n    [Signal]\n    public delegate void WeaponFiredEventHandler(Vector2 SpaceShipNosePosition);\n\n    public override void _Process(double delta)\n    {\n        // Bedingung: L\u00f6st das Signal aus, wenn die Leertaste gedr\u00fcckt wird\n        if (Input.IsKeyPressed(Key.Space))\n        {\n            Vector2 weaponPos = new Vector2(0, 0); // Platzhalterwert, richtige Position muss berechnet werden\n\n            // Hier muss die richtige Position noch berechnet werden \n            // Zum Beispiel: weaponPos = this.GlobalPosition + new Vector2(0, -10);\n\n            EmitSignal(SignalName.WeaponFired, weaponPos);\n        }\n    }\n}\n</code></pre>"},{"location":"gamedev/godot_events.html#erklarung-des-codes","title":"Erkl\u00e4rung des Codes","text":"<ul> <li>[Signal] public delegate void WeaponFiredEventHandler(Vector2 SpaceShipNosePosition): Deklariert ein Signal namens <code>WeaponFiredEventHandler</code>, das die Position der Nasenspitze des Raumschiffs als Argument \u00fcbergibt.</li> <li>_Process(double delta): Diese Methode wird jeden Frame aufgerufen. Sie \u00fcberpr\u00fcft, ob die Leertaste gedr\u00fcckt wird. Wenn dies der Fall ist, wird das Signal <code>WeaponFiredEventHandler</code> ausgel\u00f6st und die Position der Waffe als Argument \u00fcbergeben.</li> </ul>"},{"location":"gamedev/godot_events.html#schritt-2-signal-in-der-root-klasse-verknupfen","title":"Schritt 2: Signal in der Root-Klasse verkn\u00fcpfen","text":"<p>In der <code>Root</code>-Klasse verkn\u00fcpfen wir das Signal, damit eine andere Methode darauf reagieren kann.</p> <pre><code>using Godot;\n\npublic partial class Root : Node2D\n{\n    public override void _Ready()\n    {\n        // Erstellen und Hinzuf\u00fcgen einer Instanz der SpaceShip-Klasse\n        SpaceShip s = new SpaceShip();\n\n        // Verkn\u00fcpfen des Signals mit einer Methode\n        s.WeaponFired += OnWeaponFired;\n\n        AddChild(s);\n    }\n\n    // Methode, die auf das Signal reagiert\n    private void OnWeaponFired(Vector2 SpaceShipNosePosition)\n    {\n        // Erstellen einer neuen Waffe an der Position der Nasenspitze des Raumschiffs\n        Weapon w = new Weapon(SpaceShipNosePosition);\n        AddChild(w);\n    }\n\n    public override void _Process(double delta)\n    {\n    }\n}\n</code></pre>"},{"location":"gamedev/godot_events.html#erklarung-des-codes_1","title":"Erkl\u00e4rung des Codes","text":"<ul> <li>_Ready(): Diese Methode wird aufgerufen, wenn die Root-Node in die Szene eingef\u00fcgt wird. Hier wird eine Instanz der <code>SpaceShip</code>-Klasse erstellt, das Signal <code>WeaponFiredEventHandler</code> mit der Methode <code>OnWeaponFired</code> verkn\u00fcpft und die Instanz als Kindknoten hinzugef\u00fcgt.</li> <li>OnWeaponFired(Vector2 SpaceShipNosePosition): Diese Methode wird aufgerufen, wenn das Signal <code>WeaponFiredEventHandler</code> ausgel\u00f6st wird. Sie erstellt eine neue Instanz der <code>Weapon</code>-Klasse an der angegebenen Position und f\u00fcgt sie als Kindknoten hinzu.</li> </ul>"},{"location":"gamedev/godot_events.html#zusammenfassung","title":"Zusammenfassung","text":"<p>Signale bieten eine leistungsstarke und flexible M\u00f6glichkeit, Ereignisse in Godot zu handhaben. Durch die Deklaration und Verkn\u00fcpfung von Signalen k\u00f6nnen verschiedene Teile eines Spiels auf eine entkoppelte Weise miteinander interagieren. In diesem Beispiel haben wir gezeigt, wie ein Signal in einer Node-Klasse deklariert und in der <code>Root</code>-Klasse verkn\u00fcpft wird, um auf eine bestimmte Bedingung zu reagieren und darauf basierend eine Aktion auszuf\u00fchren.</p>"},{"location":"gamedev/objekt_bewegen.html","title":"Bewegung eines Objekts mit Hilfe von Tasten","text":"<p>In diesem Kapitel erkl\u00e4ren wir, wie man die Position eines Objekts mit Hilfe von Tasten ver\u00e4ndern kann. Dazu verwenden wir den folgenden Code, der in der Methode <code>_Process</code> implementiert ist. Dieser Code erm\u00f6glicht es, ein Objekt auf dem Bildschirm zu bewegen, indem die Pfeiltasten auf der Tastatur gedr\u00fcckt werden.</p> <pre><code>public override void _Process(double delta)\n{\n    // Definiert die Geschwindigkeit der Bewegung\n    float speed = 1000;\n\n    // Speichert die aktuelle Position des Objekts\n    var pos = this.Position;\n\n    // Berechnet die \u00c4nderung der Position basierend auf der Zeit, die seit dem letzten Frame vergangen ist\n    var deltaPos = (float)(delta * speed);\n\n    // \u00dcberpr\u00fcft, ob die linke Pfeiltaste gedr\u00fcckt wird\n    if (Input.IsKeyPressed(Key.Left))\n    {\n        // Bewegt das Objekt nach links\n        pos.X -= deltaPos;\n    }\n    // \u00dcberpr\u00fcft, ob die rechte Pfeiltaste gedr\u00fcckt wird\n    if (Input.IsKeyPressed(Key.Right))\n    {\n        // Bewegt das Objekt nach rechts\n        pos.X += deltaPos;\n    }\n\n    // Aktualisiert die Position des Objekts\n    this.Position = pos;\n}\n</code></pre>"},{"location":"gamedev/objekt_bewegen.html#erklarung-des-codes","title":"Erkl\u00e4rung des Codes","text":""},{"location":"gamedev/objekt_bewegen.html#geschwindigkeit-der-bewegung","title":"Geschwindigkeit der Bewegung","text":"<p>Quote</p> <pre><code>float speed = 1000;\n</code></pre> <p>Hier definieren wir eine Variable <code>speed</code>, die die Geschwindigkeit der Bewegung des Objekts festlegt. Der Wert 1000 bedeutet, dass das Objekt sich schnell bewegen wird.</p>"},{"location":"gamedev/objekt_bewegen.html#speichern-und-aktualisieren-der-position","title":"Speichern und Aktualisieren der Position","text":"<p>Quote</p> <pre><code>var pos = this.Position;\nvar deltaPos = (float)(delta * speed);\n</code></pre> <ul> <li><code>var pos = this.Position;</code> speichert die aktuelle Position des Objekts in der Variablen <code>pos</code>. Diese Variable ist vom Typ <code>Vector2</code>, einer Struktur, die die x- und y-Koordinaten des Objekts enth\u00e4lt.</li> <li><code>var deltaPos = (float)(delta * speed);</code> berechnet die \u00c4nderung der Position basierend auf der Zeit (<code>delta</code>), die seit dem letzten Frame vergangen ist, und der festgelegten Geschwindigkeit (<code>speed</code>).</li> </ul> <p>Info</p> <p>Da <code>Vector2</code> ein Werttyp (struct) und kein Referenztyp ist, speichern wir die aktuelle Position zuerst in einer Variablen, \u00e4ndern sie und weisen sie dann wieder der <code>Position</code>-Eigenschaft zu. Dies ist notwendig, weil wir nicht direkt auf die Eigenschaften einer Struktur zugreifen und sie \u00e4ndern k\u00f6nnen.</p>"},{"location":"gamedev/objekt_bewegen.html#tastenuberprufung-und-positionsanderung","title":"Tasten\u00fcberpr\u00fcfung und Positions\u00e4nderung","text":"<p>Quote</p> <pre><code>if (Input.IsKeyPressed(Key.Left))\n{\n    pos.X -= deltaPos;\n}\nif (Input.IsKeyPressed(Key.Right))\n{\n    pos.X += deltaPos;\n}\n</code></pre> <p>Hier \u00fcberpr\u00fcfen wir, ob eine der Pfeiltasten gedr\u00fcckt wird, und \u00e4ndern entsprechend die x- oder y-Koordinate der Position:</p> <ul> <li> <p><code>Input.IsKeyPressed(Key.Left)</code>: \u00dcberpr\u00fcft, ob die linke Pfeiltaste gedr\u00fcckt wird, und bewegt das Objekt nach links, indem <code>deltaPos</code> von der x-Koordinate abgezogen wird.</p> </li> <li> <p><code>Input.IsKeyPressed(Key.Right)</code>: \u00dcberpr\u00fcft, ob die rechte Pfeiltaste gedr\u00fcckt wird, und bewegt das Objekt nach rechts, indem <code>deltaPos</code> zur x-Koordinate addiert wird.</p> </li> </ul>"},{"location":"gamedev/objekt_bewegen.html#aktualisieren-der-position","title":"Aktualisieren der Position","text":"<p>Quote</p> <pre><code>this.Position = pos;\n</code></pre> <p>Am Ende der Methode wird die aktualisierte Position dem Objekt zugewiesen. Dadurch wird die neue Position des Objekts auf dem Bildschirm reflektiert.</p>"},{"location":"gamedev/objekt_bewegen.html#wichtige-funktionen-und-konzepte","title":"Wichtige Funktionen und Konzepte","text":""},{"location":"gamedev/objekt_bewegen.html#inputiskeypressed","title":"Input.IsKeyPressed","text":"<p>Die Funktion <code>Input.IsKeyPressed(Key key)</code> \u00fcberpr\u00fcft, ob eine bestimmte Taste auf der Tastatur gedr\u00fcckt wird. Sie gibt <code>true</code> zur\u00fcck, wenn die Taste gedr\u00fcckt wird, und <code>false</code>, wenn nicht. Dies erm\u00f6glicht es uns, auf Benutzereingaben zu reagieren und entsprechende Aktionen im Spiel auszuf\u00fchren.</p>"},{"location":"gamedev/objekt_bewegen.html#vector2-als-struktur","title":"Vector2 als Struktur","text":"<p>Die <code>Position</code>-Eigenschaft eines <code>Node2D</code>-Objekts ist vom Typ <code>Vector2</code>, einer Struktur, die zwei float-Werte (x und y) speichert. Da <code>Vector2</code> ein Werttyp ist, m\u00fcssen wir die Position erst in einer Variablen speichern, \u00e4ndern und dann zur\u00fcckschreiben, anstatt direkt die Eigenschaften zu \u00e4ndern.</p>"},{"location":"gamedev/objekt_bewegen.html#erweiterung-der-navigation","title":"Erweiterung der Navigation","text":""},{"location":"gamedev/objekt_bewegen.html#aufgabe-1","title":"Aufgabe 1","text":"<p>Aufgabe</p> <p>Erweitern Sie den Code, damit der Kreis auch nach oben und unten (Y-Richtung) mit den entsprechenden Pfeiltasten navigiert werden kann.</p> L\u00f6sung <pre><code>public override void _Process(double delta)\n{\n    float speed = 1000;\n    var pos = this.Position;\n    var deltaPos = (float)(delta * speed);\n\n    if (Input.IsKeyPressed(Key.Left))\n    {\n        pos.X -= deltaPos;\n    }\n    if (Input.IsKeyPressed(Key.Right))\n    {\n        pos.X += deltaPos;\n    }\n    if (Input.IsKeyPressed(Key.Up))  // F\u00fcgt Bewegung nach oben hinzu\n    {\n        pos.Y -= deltaPos;\n    }\n    if (Input.IsKeyPressed(Key.Down))  // F\u00fcgt Bewegung nach unten hinzu\n    {\n        pos.Y += deltaPos;\n    }\n\n    this.Position = pos;\n}\n</code></pre>"},{"location":"gamedev/objekt_bewegen.html#aufgabe-2","title":"Aufgabe 2","text":"<p>Aufgabe</p> <p>Erweitern Sie den Code so, dass der Kreis nicht aus dem Fenster bewegt werden kann.</p> L\u00f6sung <pre><code>public override void _Process(double delta)\n{\n    // ...\n\n    // Begrenzung der Bewegung innerhalb des Fensters\n    var windowSize = GetViewport().GetVisibleRect().Size;\n    if (pos.X &lt; _radius)\n    {\n        pos.X = _radius;\n    }\n    if (pos.X &gt; windowSize.x - _radius)\n    {\n        pos.X = windowSize.x - _radius;\n    }\n    if (pos.Y &lt; _radius)\n    {\n        pos.Y = _radius;\n    }\n    if (pos.Y &gt; windowSize.y - _radius)\n    {\n        pos.Y = windowSize.y - _radius;\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"gamedev/objekt_hinzufuegen.html","title":"Erstellen und Anzeigen eines neuen Spielobjekts","text":"<p>In diesem Abschnitt f\u00fcgen wir ein neues Spielobjekt hinzu und lassen es in der Mitte der Anzeige anzeigen. Wir werden einen einfachen Kreis zeichnen, der sich in der Mitte des Fensters befindet.</p>"},{"location":"gamedev/objekt_hinzufuegen.html#code-erklarung","title":"Code-Erkl\u00e4rung","text":"<p>Hier ist der Code, der ein neues Spielobjekt vom Typ <code>Node2D</code> erzeugt und anzeigt. Der Kreis wird in der Mitte des Fensters gezeichnet.</p> <pre><code>using Godot;\n\npublic partial class EinKreis : Node2D\n{\n    // Der Radius des Kreises\n    private float _radius = 50;\n\n    // Called when the node enters the scene tree for the first time.\n    public override void _Ready()\n    {\n        // Ermittelt die Gr\u00f6\u00dfe des Anzeigefensters\n        Vector2 windowSize = GetViewport().GetVisibleRect().Size;\n\n        // Berechnet die Position des Kreises als die Mitte des Fensters\n        Vector2 kreisPosition = windowSize / 2;\n\n        // Setzt die Position des Kreises\n        this.Position = kreisPosition;\n        // Gibt dem Objekt die Farbe Gr\u00fcn\n        this.Modulate = Colors.Green;\n    }\n\n    // Called every frame. 'delta' is the elapsed time since the previous frame.\n    public override void _Process(double delta)\n    {\n        // Bisher nichts zu tun\n    }\n\n    // Called to draw the node.\n    public override void _Draw()\n    {\n        // Zeichnet den Kreis. Der Vektor (0, 0) gibt die Position relativ zur Node-Position an.\n        // Wir \u00fcbergeben beim manuellen Zeichnen immer Colors.White. Die eigentliche Farbe\n        // legen wir f\u00fcr \u00fcber Modulate fest.\n        DrawCircle(Vector2.Zero, _radius, Colors.White);\n    }\n}\n</code></pre>"},{"location":"gamedev/objekt_hinzufuegen.html#erklarung-der-klasse-einkreis","title":"Erkl\u00e4rung der Klasse <code>EinKreis</code>","text":""},{"location":"gamedev/objekt_hinzufuegen.html#eigenschaften","title":"Eigenschaften","text":"<ul> <li>_radius: Dies ist der Radius des Kreises, der gezeichnet wird. In diesem Beispiel betr\u00e4gt der Radius 50 Einheiten.</li> </ul>"},{"location":"gamedev/objekt_hinzufuegen.html#methoden","title":"Methoden","text":"<ul> <li> <p>_Ready(): Diese Methode wird aufgerufen, wenn die Node zum ersten Mal in die Szene eingef\u00fcgt wird. Hier wird die Gr\u00f6\u00dfe des Anzeigefensters ermittelt und die Position des Kreises in die Mitte des Fensters gesetzt.</p> </li> <li> <p>_Process(double delta): Diese Methode wird jeden Frame aufgerufen. Der Parameter <code>delta</code> gibt die vergangene Zeit seit dem vorherigen Frame an. In diesem Beispiel wird diese Methode nicht genutzt.</p> </li> <li> <p>_Draw(): Diese Methode wird aufgerufen, um die Node zu zeichnen. Hier wird der Kreis gezeichnet. Der Kreis wird an der Position <code>(0, 0)</code> relativ zur Position der Node gezeichnet, was bedeutet, dass er an der zuvor festgelegten Position in der Mitte des Fensters erscheint.</p> </li> </ul> <p>Info</p> <p>Der Vektor <code>(0, 0)</code> in der Methode <code>DrawCircle</code> gibt die Position relativ zur Node-Position an. Da die Node-Position bereits auf die Mitte des Fensters gesetzt wurde, wird der Kreis ebenfalls in der Mitte des Fensters gezeichnet.</p>"},{"location":"gamedev/objekt_hinzufuegen.html#hinzufugen-der-klasse-zur-szene","title":"Hinzuf\u00fcgen der Klasse zur Szene","text":"<p>Um die Klasse <code>EinKreis</code> zur Szene hinzuzuf\u00fcgen und anzuzeigen, m\u00fcssen wir sie instanziieren und zur Root-Node hinzuf\u00fcgen. Hier ist ein Beispiel, wie dies in der <code>Root</code>-Klasse gemacht werden kann:</p> <p>Da wir bisher das Objekt nur erstellt, aber nicht initialisiert haben, m\u00fcssen wir noch ein Objekt der Klasse <code>EinKreis</code> instanziieren. Das k\u00f6nnen wir in unserer <code>Root</code>-Klasse in der <code>Ready</code>-Funktion machen: <code>EinKreis kreis = new EinKreis()</code>. Das gen\u00fcgt aber noch nicht. Aktuell legen wir nur das Objekt an, sagen aber Godot (dem Framework) nicht, dass wir das Objekt auch in unserem Code angelegt haben. Um dies zu erreichen, f\u00fcgen wir die Instanz von <code>EinKreis</code> dem <code>Root</code>-Objekt als \"Child\" hinzu: <code>AddChild(kreis)</code>. Nun \"kennt\" Godot den Kreis und wird die Funktionen der Klasse (<code>_Ready</code>, <code>_Process</code> und <code>_Draw</code>) aufrufen.</p> <pre><code>using Godot;\n\npublic partial class Root : Node2D\n{\n    public override void _Ready()\n    {\n        // Erstellen einer Instanz der Klasse EinKreis\n        EinKreis kreis = new EinKreis();\n\n        // Hinzufuegen des Kreises als Kindknoten zur Root-Node\n        AddChild(kreis);\n    }\n\n    public override void _Process(double delta)\n    {\n    }\n}\n</code></pre> <p>Vorsicht</p> <p>Da das Godot-Framework die Datei Root.cs im Hintergrund verwendet, d\u00fcrfen keine Speziellen Character, wie z. B. Umlaute (\u00e4, \u00f6, \u00fc) in dieser Datei vorhanden sein! Alle anderen Dateien, die Sie im Projekt anlegen, k\u00f6nnen diese Character enthalten.</p> <p>In diesem Beispiel wird im <code>_Ready</code>-Methode der <code>Root</code>-Klasse eine Instanz der <code>EinKreis</code>-Klasse erstellt und zur Root-Node hinzugef\u00fcgt. Dadurch wird der Kreis im Fenster angezeigt.</p>"},{"location":"gamedev/objekt_hinzufuegen.html#beispiel-rechteck","title":"Beispiel Rechteck","text":"<p>In diesem Absatz erkl\u00e4ren wir anhand des folgenden Beispielcodes, wie anstatt eines Kreises (<code>EinKreis</code>) ein Rechteck hinzugef\u00fcgt wird.</p> <pre><code>public partial class EinRechteck : Node2D\n{\n    // Die Breite und H\u00f6he des Rechtecks\n    private float _width = 100;\n    private float _height = 50;\n\n    // Called when the node enters the scene tree for the first time.\n    public override void _Ready()\n    {\n        // Ermittelt die Gr\u00f6\u00dfe des Anzeigefensters\n        Vector2 windowSize = GetViewport().GetVisibleRect().Size;\n\n        // Position des Rechtecks: Mitte horizontal und im oberen Viertel vertikal\n        float rechteckPosX = windowSize.X / 2;\n        float rechteckPosY = windowSize.Y / 4;\n\n        // Setzt die Position des Rechtecks\n        this.Position = new Vector2(rechteckPosX, rechteckPosY);\n\n        // Gibt dem Objekt die Farbe Blau\n        this.Modulate = Colors.Blue;\n    }\n\n    // Called every frame. 'delta' is the elapsed time since the previous frame.\n    public override void _Process(double delta)\n    {\n        // Bisher nichts zu tun\n    }\n\n    // Called to draw the node.\n    public override void _Draw()\n    {\n        // Zeichnet das Rechteck. Der Vektor (0, 0) gibt die Position relativ zur Node-Position an.\n        // Die Position hier ist immer (0, 0), wir \u00e4ndern die Position \u00fcber this.Position.\n        // Der zweite Vektor (_width, _height) gibt die Breite und H\u00f6he des Rechtecks an.\n        // Als Farbe verwenden wir hier immer Colors.White, die Farbe des Objekts geben wir\n        // \u00fcber this.Modulate an.\n        DrawRect(new Rect2(new Vector2(0, 0), new Vector2(_width, _height)), Colors.White);\n    }\n}\n</code></pre>"},{"location":"gamedev/objekt_hinzufuegen.html#erklarung-der-klasse-einrechteck","title":"Erkl\u00e4rung der Klasse <code>EinRechteck</code>","text":""},{"location":"gamedev/objekt_hinzufuegen.html#eigenschaften_1","title":"Eigenschaften","text":"<ul> <li>_width: Die Breite des Rechtecks, die auf 100 Einheiten festgelegt ist.</li> <li>_height: Die H\u00f6he des Rechtecks, die auf 50 Einheiten festgelegt ist.</li> </ul>"},{"location":"gamedev/objekt_hinzufuegen.html#methoden_1","title":"Methoden","text":"<ul> <li> <p>_Ready(): Diese Methode wird aufgerufen, wenn die Node zum ersten Mal in die Szene eingef\u00fcgt wird. Hier wird die Gr\u00f6\u00dfe des Anzeigefensters ermittelt und die Position des Rechtecks auf die Mitte horizontal und das obere Viertel vertikal gesetzt. Au\u00dferdem wird die Farbe des Rechtecks auf Blau gesetzt.</p> </li> <li> <p>_Process(double delta): Diese Methode wird jeden Frame aufgerufen. Der Parameter <code>delta</code> gibt die vergangene Zeit seit dem vorherigen Frame an. In diesem Beispiel wird diese Methode nicht genutzt.</p> </li> <li> <p>_Draw(): Diese Methode wird aufgerufen, um die Node zu zeichnen. Hier wird das Rechteck gezeichnet. Der Vektor <code>(0, 0)</code> gibt die Position relativ zur Node-Position an, und der zweite Vektor gibt die Breite und H\u00f6he des Rechtecks an. Die Farbe des Rechtecks wird \u00fcber <code>this.Modulate</code> auf Blau gesetzt, w\u00e4hrend die Zeichenfarbe <code>Colors.White</code> ist.</p> </li> </ul>"},{"location":"gamedev/objekt_hinzufuegen.html#erweiterung","title":"Erweiterung","text":""},{"location":"gamedev/objekt_hinzufuegen.html#aufgabe-1","title":"Aufgabe 1","text":"<p>Aufgabe</p> <p>Wenn Sie den Code f\u00fcr das Rechteck in Ihr Projekt \u00fcbernehmen und ausf\u00fchren, werden Sie merken, dass das Rechteck nicht gezeichnet wird. Fixen Sie diesen Bug!</p> Tip <p>Wie beim Kreis muss auch eine Instanz von EinRecheck in der Klasse Root erstellt werden.</p> L\u00f6sung <p>In der Funktion _Ready der Root-Klasse:</p> <pre><code>public partial class Root : Node2D\n{\n    // ...\n\n    public override void _Ready()\n    {\n        //... \n\n        // Erstellen einer Instanz der Klasse EinRechteck\n        EinRechteck rechteck = new EinRechteck();\n\n        // Hinzufuegen des Rechtecks als Kindknoten zur Root-Node\n        AddChild(rechteck);\n    }\n\n    // ...\n}\n</code></pre>"},{"location":"gamedev/objekt_hinzufuegen.html#aufgabe-2","title":"Aufgabe 2","text":"<p>Aufgabe</p> <p>Das Rechteck wird nicht wie der Kreis in der Mitte gezeichnet. Das liegt daran, dass der Nullpunkt des Kreises sein Mittelpunkt ist, der Nullpunkt des Rechtecks aber Oben links. Erweitern Sie den Code, damit das Rechteck seinen Ursprung auch immer (unabh\u00e4ngig von seiner Gr\u00f6\u00dfe und Position) in seinem Mittplpunkt hat.</p> L\u00f6sung <p>Durch die Anpassung des Poisition-Parameters der DrawRect-Methode wird das Rechteck immer an die richtige Position gezeichnet (Vorzeichen beachten!):</p> <pre><code>// In _Draw() von EinRechteck\nDrawRect(new Rect2(new Vector2(-(_width / 2), -(_height / 2)), new Vector2(_width, _height)), Colors.White);\n</code></pre>"},{"location":"gamedev/uebersicht.html","title":"\u00dcbersicht \u00fcber das Projekt","text":"<p>In diesem Abschnitt geben wir eine \u00dcbersicht \u00fcber das vorgefertigte Projekt, das wir f\u00fcr die Kursteilnehmer vorbereitet haben. Da wir das Spiel in der Programmiersprache C# erstellen und nicht die Godot-Oberfl\u00e4che verwenden, konzentrieren wir uns auf den vorhandenen Code und dessen Struktur.</p>"},{"location":"gamedev/uebersicht.html#projektstruktur","title":"Projektstruktur","text":"<p>Das Projekt enth\u00e4lt aktuell eine Datei namens <code>Root.cs</code>. Der Inhalt dieser Datei ist wie folgt:</p> <pre><code>using Godot;\n\npublic partial class Root : Node2D\n{\n    // Called when the node enters the scene tree for the first time.\n    public override void _Ready()\n    {\n    }\n\n    // Called every frame. 'delta' is the elapsed time since the previous frame.\n    public override void _Process(double delta)\n    {\n    }\n}\n</code></pre> <p>Vorsicht</p> <p>Da das Godot-Framework die Datei Root.cs im Hintergrund verwendet, d\u00fcrfen keine Speziellen Character, wie z. B. Umlaute (\u00e4, \u00f6, \u00fc) in dieser Datei vorhanden sein! Alle anderen Dateien, die Sie im Projekt anlegen, k\u00f6nnen diese Character enthalten.</p>"},{"location":"gamedev/uebersicht.html#erklarung-der-klasse-root","title":"Erkl\u00e4rung der Klasse <code>Root</code>","text":"<p>Die Klasse <code>Root</code> erbt von <code>Node2D</code>, einer von Godot vordefinierten Klasse. Godot bietet viele vordefinierte Klassen, von denen geerbt werden kann, um verschiedene Funktionalit\u00e4ten im Spiel zu implementieren.</p>"},{"location":"gamedev/uebersicht.html#wichtige-eigenschaften-von-node2d","title":"Wichtige Eigenschaften von <code>Node2D</code>","text":"<ul> <li>Position: Die Position der Node im Raum.</li> <li>Rotation: Die Rotation der Node.</li> <li>Scale: Die Skalierung der Node.</li> <li>Modulate: Definiert die Farbe der Node.</li> </ul>"},{"location":"gamedev/uebersicht.html#methoden-der-klasse-root","title":"Methoden der Klasse <code>Root</code>","text":"<ul> <li>_Ready(): Diese Methode wird aufgerufen, sobald das Objekt das erste Mal verarbeitet wird. Sie eignet sich f\u00fcr Initialisierungen.</li> <li>_Process(double delta): Diese Methode wird jeden Frame einmal aufgerufen. Der Parameter <code>delta</code> gibt die vergangene Zeit seit dem vorherigen Frame an.</li> </ul> <p>Note</p> <p>Die \u00fcberschriebenen Methoden <code>_Ready()</code> und <code>_Process(double delta)</code> werden von Godot automatisch zu einem bestimmten Zeitpunkt aufgerufen. Sie sind essenziell f\u00fcr die Spielentwicklung, da sie grundlegende Lebenszyklusmethoden eines Nodes darstellen.</p> <p>Im weiteren Verlauf werden wir diese Klasse erweitern und die grundlegenden Spielmechaniken implementieren. Dabei werden wir auf die Eigenschaften und Methoden von <code>Node2D</code> und anderen Godot-Klassen zur\u00fcckgreifen, um unser Spiel zu entwickeln.</p>"},{"location":"gamedev/uebersicht.html#funktion-der-klasse-root","title":"Funktion der Klasse Root","text":"<p>Die Klasse Root wird in unserem Projekt kein eigentliches Objekt im Spiel sein. Stattdessen ist diese Klasse der Einstiegspunkt f\u00fcr weitere Klassen, die von dieser Klasse erstellt und verwaltet werden. Dies erm\u00f6glicht eine klare Struktur und Verwaltung der verschiedenen Spielkomponenten und -logiken.</p> <p>Im weiteren Verlauf werden wir diese Klasse erweitern und die grundlegenden Spielmechaniken implementieren. Dabei werden wir auf die Eigenschaften und Methoden von Node2D und anderen Godot-Klassen zur\u00fcckgreifen, um unser Spiel zu entwickeln.</p>"},{"location":"git/git_cmd.html","title":"Git in Kommandozeile","text":""},{"location":"git/git_cmd.html#schritt-1-klone-das-original-repository","title":"Schritt 1 - Klone das Original-Repository","text":"<p>Bevor du mit der lokalen Entwicklung beginnen kannst, solltest du eine Kopie des Repositories klonen, an dem du arbeitest.</p> <p>In der Befehlszeile verwendest du den Befehl <code>git clone</code>.</p> <p>Beispiel:</p> <p>Remote Repository URL kopieren:</p> <p></p> <p>In Kommandozeile:</p> <pre><code>git clone https://bszw-git.ddns.net:3000/swopperer/Zufallsgenerator.git\n</code></pre>"},{"location":"git/git_cmd.html#schritt-2-erstelle-deinen-entwicklungs-branch","title":"Schritt 2 - Erstelle deinen Entwicklungs-Branch","text":"<p>Anstatt auf dem Haupt-Produktions-Branch zu arbeiten, solltest du einen eigenen sicheren Bereich f\u00fcr deine Entwicklungsarbeit erstellen.</p> <p>Nichts, was du hier tust, ist in Stein gemei\u00dfelt, also experimentiere so viel du m\u00f6chtest mit dem Code.</p> <p>In der Befehlszeile verwendest du den Befehl <code>git branch</code>, um deinen lokalen Klon des Repositories auf einen neuen Branch zu verschieben.</p> <p>F\u00fcr die Schule verwendest du bitte immer folgendes Schema f\u00fcr den Branchnamen:</p> <pre><code>klasse_vorname_nachname\n</code></pre> <p>Konkret:</p> <pre><code>git branch bfi11a_max_mustermann\n</code></pre> <p>Vergiss nicht, den neu erstellten Branch dann zu aktivieren (auszuchecken):</p> <pre><code>git checkout bfi11a_max_mustermann\n</code></pre>"},{"location":"git/git_cmd.html#alternative-brancherstellung","title":"Alternative Brancherstellung:","text":"<p>Da man eigentlich fast immer den neu erstellten Branch direkt danach auschecken m\u00f6chte, gibt es einen besseren Befehl, der den Branch erstellt und diesen automatisch auscheckt. Dadurch muss der Branch vorher nicht via <code>git branch</code> erstellt werden.</p> <pre><code>git checkout -b bfi11a_max_mustermann\n</code></pre>"},{"location":"git/git_cmd.html#schritt-3-anderungen-ins-lokale-repository-ubernehmen","title":"Schritt 3 - \u00c4nderungen ins lokale Repository \u00fcbernehmen","text":"<p>Mit dem Befehl <code>git add *</code> f\u00fcgst du alle \u00c4nderungen in die Staging Area hinzu.</p> <p>Nachfolgend f\u00fcgst du deine \u00c4nderungen mit dem Befehl <code>git commit -m \"Commit Nachricht\"</code> hinzu (du Commitest deine \u00c4nderungen).</p> <p>Beispiel in Kommandozeile:</p> <pre><code>git add *\ngit commit -m \"Ich habe viele tolle \u00c4nderungen gemacht\"\n</code></pre> <p>Wiederhole das Hinzuf\u00fcgen von \u00c4nderungen so oft du m\u00f6chtest. Commite lieber zu oft als zu wenig!</p>"},{"location":"git/git_cmd.html#schritt-5-pushe-deine-anderungen-ins-remote-repository","title":"Schritt 5 - Pushe deine \u00c4nderungen ins Remote-Repository","text":"<p>Um deine \u00c4nderungen in das Remote Repository hochzuladen, musst du diese <code>Pushen</code>.</p> <p>Da es deinen Branch aktuell nur lokal gibt, musst du den Namen beim Pushen nochmals angeben:</p> <pre><code>git push -o branchname\n</code></pre> <p>Beispiel:</p> <pre><code>git push -o bfi11a_max_mustermann\n</code></pre>"},{"location":"git/git_cmd_short.html","title":"Git in Kommandozeile Kurz\u00fcbersicht","text":""},{"location":"git/git_cmd_short.html#1-repository-von-remote-kopieren","title":"1. Repository von Remote kopieren:","text":"<pre><code>git clone https://bszw-git.ddns.net:3000/swopperer/Zufallsgenerator.git\n</code></pre>"},{"location":"git/git_cmd_short.html#2-neuen-branch-erstellen-und-auschecken","title":"2. Neuen Branch erstellen und auschecken:","text":"<pre><code>git checkout -b bfi11a_max_mustermann\n</code></pre>"},{"location":"git/git_cmd_short.html#3-coden-und-anderungen-commiten","title":"3. Coden und \u00c4nderungen commiten:","text":"<pre><code>git add *\ngit commit -m \"Neue Klasse Person erstellt\"\n</code></pre> <p>Info</p> <p>Commite lieber \u00f6fter als zu wenig!</p>"},{"location":"git/git_cmd_short.html#4-code-in-eigenen-branch-pushen","title":"4. Code in eigenen Branch pushen:","text":"<pre><code>git push -o bfi11a_max_mustermann\n</code></pre>"},{"location":"git/git_vs.html","title":"Git in Visual Studio","text":""},{"location":"git/git_vs.html#1-repository-von-remote-kopieren","title":"1. Repository von Remote kopieren:","text":"<p>Visual Studio starten und \"Clone a repository\" w\u00e4hlen</p> <p></p> <p>URL des Remote Repos kopieren:</p> <p></p> <p>Danach Remote Repository URL und Pfad zum Speichern auf lokalem Ger\u00e4t angeben:</p> <p></p>"},{"location":"git/git_vs.html#ubersicht","title":"\u00dcbersicht","text":"<p>\u00dcber <code>View --&gt; Git Repository</code> oder <code>Crtl+0, Ctrl+R</code> kann die Git \u00dcbersicht von Visual Studio ge\u00f6ffnet werden.</p> <p></p> <p>In diesem Fenser finden Sie alle Branches (gr\u00fcn schraffiert) und die Historie (gelb schraffiert):</p> <p></p>"},{"location":"git/git_vs.html#2-neuen-branch-erstellen-und-auschecken","title":"2. Neuen Branch erstellen und auschecken:","text":"<p>Im Men\u00fcbereich unter <code>Git</code> im Unterpunkt <code>New Branch...</code> kann ein neuer Branch angelegt werden:</p> <p></p> <p>Namen f\u00fcr den Branch vergeben (klasse_vorname_nachname) und von welchem Branch es weg kopiert werden soll:</p> <p></p> <p>Dieser wird dann in der \u00dcbersicht angezeigt:</p> <p></p>"},{"location":"git/git_vs.html#3-coden-und-anderungen-commiten","title":"3. Coden und \u00c4nderungen commiten:","text":"<p>\u00c4nderungen werden im <code>Solution Explorer</code> durch einen kleinen roten Haken angezeigt (hier ist in Program.cs eine \u00c4nderung enthalten):</p> <p></p> <p>Eine \u00dcbersicht \u00fcber die \u00c4nderungen kann unter <code>Git Changes</code> im gleichen Abschnitt des Solution Explorers angezeigt werden:</p> <p></p> <p>Mit Doppelklick auf die angezeigt Datei werden die \u00c4nderung in der Datei angezeigt. Links das Original, rechts mit \u00c4nderungen, gr\u00fcn markiert.</p> <p></p> <p>Unter <code>Git Changes</code> kann eine Commit-Message eingegeben werden. Commit All f\u00fcgt die angezeigten \u00c4nderungen automatisch zur Staging-Area hinzu und commitet im Anschluss automatisch mit der eingegebenen Commit-Message.</p> <p></p> <p>Die \u00c4nderung wird nach dem Commit auch in der \u00dcbersicht dargestellt:</p> <p></p>"},{"location":"git/git_vs.html#4-code-in-eigenen-branch-pushen","title":"4. Code in eigenen Branch pushen:","text":"<p>Um die \u00c4nderungen jetzt im Remote Repository hochzuladen, muss der Branch mit den \u00c4nderungen noch gepusht werden:</p> <p></p> <p>Nun wird der Branch auch in der \u00dcbersicht unter <code>remotes</code> angezeigt:</p> <p></p>"},{"location":"git/git_vs_short.html","title":"Git in Visual Studio Kurz\u00fcbersicht","text":""},{"location":"git/git_vs_short.html#1-repository-von-remote-kopieren","title":"1. Repository von Remote kopieren:","text":"<p>Visual Studio starten und \"Clone a repository\" w\u00e4hlen</p> <p></p> <p>URL des Remote Repos kopieren:</p> <p></p> <p>Danach Remote Repository URL und Pfad zum Speichern auf lokalem Ger\u00e4t angeben:</p> <p></p>"},{"location":"git/git_vs_short.html#2-neuen-branch-erstellen-und-auschecken","title":"2. Neuen Branch erstellen und auschecken:","text":"<p>Im Men\u00fcbereich unter <code>Git</code> im Unterpunkt <code>New Branch...</code> kann ein neuer Branch angelegt werden:</p> <p></p> <p>Namen f\u00fcr den Branch vergeben (klasse_vorname_nachname) und von welchem Branch es weg kopiert werden soll:</p> <p></p>"},{"location":"git/git_vs_short.html#3-coden-und-anderungen-commiten","title":"3. Coden und \u00c4nderungen commiten:","text":"<p>Unter <code>Git Changes</code> Commit-Message eingegeben. Commit All f\u00fcgt die angezeigten \u00c4nderungen automatisch zur Staging-Area hinzu und commitet im Anschluss automatisch mit der eingegebenen Commit-Message.</p>"},{"location":"git/git_vs_short.html#4-code-in-eigenen-branch-pushen","title":"4. Code in eigenen Branch pushen:","text":"<p>Um die \u00c4nderungen jetzt im Remote Repository hochzuladen, muss der Branch mit den \u00c4nderungen noch gepusht werden:</p> <p></p>"},{"location":"grundlagen/dateien.html","title":"Lesen und Schreiben von Dateien","text":"<p>In diesem Abschnitt wird beschrieben, wie Sie mit Hilfe der Objekte StreamReader und StreamWriter Dateien lesen bzw. schreiben k\u00f6nnen.</p>"},{"location":"grundlagen/dateien.html#dateien-offnen-und-schlieen","title":"Dateien \u00f6ffnen und schlie\u00dfen","text":"<p>Um eine Datei zu lesen bzw. zu schreiben muss diese zuerst ge\u00f6ffnet werden.</p> <p>Ist eine Datei ge\u00f6ffnet, kann Sie (je nach Verwendungszweck) eventuell nicht von anderen Prozessen verwendet werden.</p> <p>Um die Datei f\u00fcr andere Prozesse wieder frei zu geben, muss der Stream bzw. die Datei wieder geschlossen werden:</p>"},{"location":"grundlagen/dateien.html#close","title":"Close()","text":"<pre><code>// StreamReader initialisieren (Datei \u00f6ffnen) (1)\nStreamReader sr = new StreamReader(\"TestDatei.txt\");\n\n// StreamReader wird in diesem Abschnitt verwendet\n\n// Datei freigeben (2)\nsr.Close();\n</code></pre> <ol> <li>Beim Erstellen des StreamReader bzw. StreamWriter-Objkets wird die Datei TestDatei.txt ge\u00f6ffnet.</li> <li>Close() schlie\u00dft die Datei und gibt sie somit wieder frei.</li> </ol>"},{"location":"grundlagen/dateien.html#using","title":"using","text":"<p>Da das Schlie\u00dfen der Datei oft vergessen wird, kann alternativ <code>using</code> verwendet werden:</p> <pre><code>// StreamReader initialisieren (1)\nusing (StreamReader sr = new StreamReader(\"TestDatei.txt\"))\n{\n    // StreamReader wird in diesem Codeblock verwendet\n} \n// Datei wird automatisch freigegeben (2)\n</code></pre> <ol> <li>Beim Erstellen des StreamReader bzw. StreamWriter-Objkets wird die Datei TestDatei.txt ge\u00f6ffnet.</li> <li>Beim Verlassen des Codeblocks wird der StreamReader automatisch geschlossen. Kein explizites aufrufen von Close() n\u00f6tig.</li> </ol>"},{"location":"grundlagen/dateien.html#streamreader-datei-lesen","title":"StreamReader (Datei lesen)","text":"<p>In der Regel werden Dateien zeilenweise mittels ReadLine() gelesen:</p> <pre><code>// StreamReader Initialisieren (1)\nusing (StreamReader sr = new StreamReader(\"TestDatei.txt\"))\n{ \n    // Erste Zeile einlesen (2)\n    string line = sr.ReadLine();\n    // Solange es etwas zu lesen gibt\n    while (line != null)\n    {\n        // Verarbeiten der Zeile (3)\n        Console.WriteLine(line);\n        // Einlesen der n\u00e4chsten Zeile (4)\n        line = sr.ReadLine();\n    }\n}\n</code></pre> <p>Info</p> <ol> <li>Das <code>using</code>-Keyword stellt sicher, dass der StreamReader wieder geschlossen wird</li> <li>Hier wird line mit der ersten Zeile von TestDatei.txt initialisiert</li> <li>Das \"Verarbeiten\" ist hier eine einfach Konsolenausgabe. Nat\u00fcrlich kann hier alles erdenkliche mit der Zeile passieren.</li> <li>Hier wird die n\u00e4chste Zeile eingelesen. Dieser Schritt ist in der Regel immer der letzte Schritt in der Schleife, da danach wieder gepr\u00fcft werden muss, ob es noch etwas einzulesen gibt.</li> </ol>"},{"location":"grundlagen/dateien.html#methoden","title":"Methoden","text":"Methode Erkl\u00e4rung Close() Closes the StreamReader object and the underlying stream, and releases any system resources associated with the reader. Peek() Returns the next available character but does not consume it. Calling this method multiple times will always return the same character (as Opposed to Read()). Read() Reads the next character from the input stream and advances the character position by one character. Read(Char[], Int32, Int32) Reads a specified maximum of characters from the current stream into a buffer, beginning at the specified index. ReadLine() Reads a line of characters from the current stream and returns the data as a string."},{"location":"grundlagen/dateien.html#streamwriter-datei-schreiben","title":"StreamWriter (Datei schreiben)","text":"<p>In der Regel werden Dateien zeilenweise mittels WriteLine() geschrieben:</p> <pre><code>// StreamWriter Initialisieren (1)\nusing (StreamWriter sw = new StreamWriter(\"TestDatei.txt\"))\n{\n    // Schreibe erste Zeile in TestDatei.txt\n    sw.WriteLine(\"Hello World!!\");\n    // Schreibe zweite Zeile in TestDatei.txt\n    sw.WriteLine(\"From the StreamWriter class\");\n} \n</code></pre> <p>Info</p> <p><code>using</code> stellt sicher, dass die Datei wieder freigegeben wird.</p>"},{"location":"grundlagen/dateien.html#methoden_1","title":"Methoden","text":"Methode Erkl\u00e4rung Close() Closes the current StreamWriter object and the underlying stream. Write(String) Writes a string to the stream. WriteLine() Writes a line terminator to the text stream."},{"location":"grundlagen/dateien.html#beispiel","title":"Beispiel","text":"<p>In diesem Beispiel wird ein Text einer Datei in Gro\u00dfbuchstaben umgewandlet:</p> <pre><code>class Program\n{\n    static void main()\n    {\n        // Streams initialisieren (1)\n        using (StreamReader sr = new StreamReader(\"kleinBuchstaben.txt))\n        using (StreamWriter sw = new StreamWriter(\"grossBuchstaben.txt\"))\n        {\n            // Erste Zeile lesen\n            string zeile = sr.ReadLine();\n            // Solange es etwas zu lesen gibt\n            while (zeile != null)\n            {\n                // Inhalt der Zeile gro\u00df schreiben\n                string zeileGross = zeile.ToUpper();\n                // Grossgeschriebene Zeile in Textdatei schreiben\n                sw.writeLine(zeileGross);\n                // N\u00e4chste Zeile lesen\n                zeile = sr.ReadLine();\n            }\n        }\n        // Streams werden automatisch geschlossen\n    }\n}\n</code></pre> <p>Info</p> <p>using kann auch hintereinander geschrieben werden, um mehrere Objekte zu verwalten.</p>"},{"location":"grundlagen/events.html","title":"Events","text":"<p>In C# werden Events verwendet, um die Ereignisbehandlung zu erm\u00f6glichen. Dies ist ein grundlegendes Konzept in der objektorientierten Programmierung und insbesondere in der Entwicklung von Benutzeroberfl\u00e4chen und ereignisgesteuerten Anwendungen. Hier sind einige Gr\u00fcnde, warum Events in C# verwendet werden:</p> <ol> <li> <p>Entkopplung: Events erm\u00f6glichen die Entkopplung von Objekten. Das bedeutet, dass ein Objekt (der Publisher) ein Ereignis ausl\u00f6sen kann, ohne zu wissen, welches Objekt (der Subscriber) auf das Ereignis reagiert. Dies f\u00f6rdert eine lose Kopplung und verbessert die Modularit\u00e4t und Wartbarkeit des Codes.</p> </li> <li> <p>Benachrichtigung \u00fcber Zustands\u00e4nderungen: Events werden h\u00e4ufig verwendet, um andere Teile eines Programms \u00fcber \u00c4nderungen in einem Objekt zu informieren. Beispielsweise kann eine Benutzeroberfl\u00e4chenkomponente ein Ereignis ausl\u00f6sen, wenn sich ein Wert \u00e4ndert, und andere Komponenten k\u00f6nnen darauf reagieren, um ihre Anzeige zu aktualisieren.</p> </li> <li> <p>Erweiterbarkeit: Durch die Verwendung von Events k\u00f6nnen Klassen so gestaltet werden, dass sie erweiterbar sind, ohne dass der urspr\u00fcngliche Code ge\u00e4ndert werden muss. Dies erm\u00f6glicht es Entwicklern, zus\u00e4tzliche Funktionalit\u00e4ten hinzuzuf\u00fcgen, indem sie einfach neue Event-Handler registrieren.</p> </li> <li> <p>Asynchronit\u00e4t: Events k\u00f6nnen verwendet werden, um asynchrone Operationen zu handhaben. Beispielsweise kann eine Netzwerkoperation ein Event ausl\u00f6sen, wenn sie abgeschlossen ist, sodass der Hauptthread nicht blockiert wird.</p> </li> <li> <p>Erweiterte Ereignisbehandlung: Durch Events kann die Ereignisbehandlung in einem klaren und strukturierten Ansatz implementiert werden. Der Code f\u00fcr die Ereignisbehandlung wird in speziellen Methoden (Event-Handlern) platziert, was die Lesbarkeit und Wartbarkeit des Codes verbessert.</p> </li> <li> <p>Benutzerdefinierte Ereignisse: Entwickler k\u00f6nnen benutzerdefinierte Events erstellen, um spezifische Aktionen oder Zustands\u00e4nderungen in ihrer Anwendung zu signalisieren. Dies macht den Code flexibler und anpassbarer an spezielle Anforderungen.</p> </li> </ol>"},{"location":"grundlagen/events.html#beispiel-ohne-events","title":"Beispiel ohne Events","text":"<p>Ein einfaches Beispiel zur Veranschaulichung:</p> <pre><code>public class Sensor \n{\n    private Alarm _alarm; // Referenz auf ein Alarm-Objekt\n    private Logger _logger; // Referenz auf ein Logger-Objekt\n    private int _threshold = 100; // Definierter Schwellenwert\n\n    // Konstruktor, der Alarm- und Logger-Objekte akzeptiert und speichert\n    public Sensor(Alarm a, Logger l) \n    {\n        _alarm = a;\n        _logger = l;\n    }\n\n    // Methode zur \u00dcberpr\u00fcfung des tats\u00e4chlichen Wertes im Vergleich zum Schwellenwert\n    public void CheckThreshold(int actualValue) \n    {\n        // Wenn der tats\u00e4chliche Wert den Schwellenwert \u00fcberschreitet\n        if (actualValue &gt; _threshold) \n        {\n            _alarm.Ring(); // Alarm ausl\u00f6sen\n            _logger.LogThresholdReached(); // Protokolleintrag erstellen\n        }\n    }\n}\n\npublic class Alarm \n{\n    // Methode zum Ausl\u00f6sen des Alarms\n    public void Ring() \n    {\n        Console.WriteLine(\"Alarm: Threshold reached!\");\n    }\n}\n\npublic class Logger \n{\n    // Methode zum Protokollieren, dass der Schwellenwert erreicht wurde\n    public void LogThresholdReached() \n    {\n        Console.WriteLine(\"Logger: Threshold reached! Logging data...\");\n    }\n}\n</code></pre> <p>Die <code>Sensor</code>-Klasse enth\u00e4lt Referenzen auf <code>Alarm</code>- und <code>Logger</code>-Objekte und \u00fcberpr\u00fcft, ob ein gegebener Wert einen bestimmten Schwellenwert \u00fcberschreitet. Wenn der Wert den Schwellenwert \u00fcberschreitet, wird ein Alarm ausgel\u00f6st und ein Protokolleintrag erstellt.</p>"},{"location":"grundlagen/events.html#enge-kopplung","title":"Enge Kopplung","text":"<p>Die Deklaration der beiden Klassen <code>Alarm</code> und <code>Logger</code> innerhalb der <code>Sensor</code>-Klasse ist problematisch, da sie zu einer engen Kopplung f\u00fchrt. Dies hat mehrere negative Auswirkungen auf die Flexibilit\u00e4t, Erweiterbarkeit und Wartbarkeit des Codes. Hier sind die Hauptgr\u00fcnde, warum dies problematisch ist:</p> <ol> <li> <p>Direkte Abh\u00e4ngigkeiten:</p> <ul> <li>Die <code>Sensor</code>-Klasse hat direkte Abh\u00e4ngigkeiten zu den <code>Alarm</code>- und <code>Logger</code>-Klassen. Dies bedeutet, dass \u00c4nderungen an den <code>Alarm</code>- oder <code>Logger</code>-Klassen m\u00f6glicherweise auch \u00c4nderungen in der <code>Sensor</code>-Klasse erfordern.</li> <li>Diese Abh\u00e4ngigkeiten erschweren es, die <code>Sensor</code>-Klasse unabh\u00e4ngig zu testen oder zu verwenden, da sie nicht ohne die <code>Alarm</code>- und <code>Logger</code>-Objekte funktioniert.</li> </ul> </li> <li> <p>Erweiterbarkeit:</p> <ul> <li>Wenn ein neues Objekt auf den Sensor reagieren soll (z.B. eine neue <code>Notifier</code>-Klasse), muss die <code>Sensor</code>-Klasse ge\u00e4ndert werden, um dieses neue Objekt zu unterst\u00fctzen. Dies erfordert das Hinzuf\u00fcgen neuer Felder, das Anpassen des Konstruktors und das \u00c4ndern der Methode <code>CheckThreshold</code>.</li> <li>Dies widerspricht dem Prinzip der offenen/geschlossenen Klasse (Open/Closed Principle), wonach eine Klasse f\u00fcr Erweiterungen offen, aber f\u00fcr \u00c4nderungen geschlossen sein sollte.</li> </ul> </li> <li> <p>Wartbarkeit:</p> <ul> <li>Der Code wird schwieriger zu warten, da \u00c4nderungen in einer der abh\u00e4ngigen Klassen (z.B. <code>Alarm</code> oder <code>Logger</code>) m\u00f6glicherweise auch \u00c4nderungen in der <code>Sensor</code>-Klasse erfordern.</li> <li>Das Hinzuf\u00fcgen neuer Funktionalit\u00e4ten oder das Refaktorisieren des Codes wird komplexer und fehleranf\u00e4lliger.</li> </ul> </li> </ol>"},{"location":"grundlagen/events.html#alternative-verwendung-von-events","title":"Alternative: Verwendung von Events","text":"<p>Eine bessere L\u00f6sung zur Vermeidung dieser Probleme ist die Verwendung von Events. Mit Events kann die <code>Sensor</code>-Klasse lose gekoppelt werden, indem sie Ereignisse ausl\u00f6st, auf die andere Klassen reagieren k\u00f6nnen. Dadurch wird die <code>Sensor</code>-Klasse unabh\u00e4ngiger von den konkreten Implementierungen der Listener und bleibt einfacher erweiterbar.</p> <p>Hier ist ein Beispiel, wie dies mit Events aussehen k\u00f6nnte:</p> <pre><code>using System;\n\npublic class Sensor \n{\n    private int _threshold = 100;\n\n    // Event declaration\n    public event EventHandler ThresholdReached;\n\n    public void CheckThreshold(int actualValue) \n    {\n        if (actualValue &gt; _threshold) \n        {\n            OnThresholdReached(EventArgs.Empty);\n        }\n    }\n\n    protected virtual void OnThresholdReached(EventArgs e)\n    {\n        ThresholdReached?.Invoke(this, e);\n    }\n}\n\npublic class Alarm \n{\n    public void OnThresholdReached(object sender, EventArgs e) \n    {\n        Console.WriteLine(\"Alarm: Threshold reached!\");\n    }\n}\n\npublic class Logger \n{\n    public void OnThresholdReached(object sender, EventArgs e) \n    {\n        Console.WriteLine(\"Logger: Threshold reached! Logging data...\");\n    }\n}\n\npublic class Program \n{\n    static void Main(string[] args) \n    {\n        Sensor sensor = new Sensor();\n\n        Alarm alarm = new Alarm();\n        Logger logger = new Logger();\n\n        // Subscribe to the event\n        sensor.ThresholdReached += alarm.OnThresholdReached;\n        sensor.ThresholdReached += logger.OnThresholdReached;\n\n        // Simulate adding values to the sensor\n        sensor.CheckThreshold(105); // This should trigger the event\n    }\n}\n</code></pre>"},{"location":"grundlagen/events.html#vorteile-der-verwendung-von-events","title":"Vorteile der Verwendung von Events:","text":"<ol> <li> <p>Lose Kopplung:</p> <ul> <li>Die <code>Sensor</code>-Klasse kennt die spezifischen Implementierungen der Listener-Klassen (<code>Alarm</code> und <code>Logger</code>) nicht. Sie l\u00f6st lediglich das <code>ThresholdReached</code>-Event aus.</li> <li>Dies f\u00f6rdert die Wiederverwendbarkeit und Modularit\u00e4t, da neue Listener hinzugef\u00fcgt werden k\u00f6nnen, ohne die <code>Sensor</code>-Klasse zu \u00e4ndern.</li> </ul> </li> <li> <p>Erweiterbarkeit:</p> <ul> <li>Neue Listener k\u00f6nnen einfach hinzugef\u00fcgt werden, indem sie sich auf das <code>ThresholdReached</code>-Event der <code>Sensor</code>-Klasse abonnieren. Es sind keine \u00c4nderungen an der <code>Sensor</code>-Klasse erforderlich.</li> <li>Die <code>Sensor</code>-Klasse bleibt offen f\u00fcr Erweiterungen (neue Listener), ohne dass sie selbst ge\u00e4ndert werden muss.</li> </ul> </li> <li> <p>Wartbarkeit:</p> <ul> <li>Der Code wird wartbarer, da \u00c4nderungen in den Listener-Klassen keine \u00c4nderungen an der <code>Sensor</code>-Klasse erfordern.</li> <li>Die Logik zur Schwellenwert\u00fcberpr\u00fcfung bleibt in der <code>Sensor</code>-Klasse, w\u00e4hrend die Reaktionen auf das Erreichen des Schwellenwerts in den jeweiligen Listener-Klassen kapselt sind.</li> </ul> </li> </ol> <p>Durch die Verwendung von Events wird der Code flexibler, modularer und leichter zu warten, was die langfristige Entwicklung und Pflege der Software erheblich erleichtert.</p>"},{"location":"grundlagen/schleifen.html","title":"Wiederholung von Vorg\u00e4ngen durch Schleifen","text":"<p>Die <code>while</code>-Anweisung pr\u00fcft eine Bedingung und f\u00fchrt die Anweisung oder den Anweisungsblock nach <code>while</code> aus. Damit wird die Bedingung wiederholt \u00fcberpr\u00fcft und die Ausf\u00fchrung dieser Anweisungen wiederholt, bis die Bedingung \"false\" lautet. <pre><code>while(BEDINGUNG == true)\n{\n  // Codeblock wird solange ausgef\u00fchrt, bis BEDINGUNG nicht mehr TRUE\n}\n</code></pre></p> <p>Wichtig!</p> <p>Stellen Sie sicher, dass die Schleifenbedingung <code>while</code> zu \"false\" wechselt, nachdem Sie den Code ausgef\u00fchrt haben. Andernfalls erstellen Sie eine Endlosschleife, durch die das Programm niemals beendet wird.</p>"},{"location":"grundlagen/schleifen.html#while","title":"while","text":"<pre><code>int counter = 0;\nwhile (counter &lt; 5)\n{\n    Console.WriteLine($\"Hello World! The counter is {counter}\");\n    counter++;\n}\n</code></pre> Output <pre><code>Hello World! The counter is 0\nHello World! The counter is 1\nHello World! The counter is 2\nHello World! The counter is 3\nHello World! The counter is 4\n</code></pre>"},{"location":"grundlagen/schleifen.html#dowhile","title":"do...while","text":"<p>Die <code>do...while</code>-Schleife f\u00fchrt den Code zuerst aus und \u00fcberpr\u00fcft anschlie\u00dfend die Bedingung. Die <code>do...while</code>-Schleife wird im folgenden Code gezeigt: <pre><code>int counter = 0;\ndo\n{\n    Console.WriteLine($\"Hello World! The counter is {counter}\");\n    counter++;\n} while (counter &lt; 5);\n</code></pre></p> Output <pre><code>Hello World! The counter is 0\nHello World! The counter is 1\nHello World! The counter is 2\nHello World! The counter is 3\nHello World! The counter is 4\n</code></pre>"},{"location":"grundlagen/schleifen.html#for-schleife","title":"for-Schleife","text":"<p>Da die Operationen INITIALISIERUNG, Pr\u00fcfung der BEDINGUNG und die WERTVER\u00c4NDERUNG sehr oft in einer Schleife ben\u00f6tigt werden, wird hierf\u00fcr oft die <code>for-Schleife</code> verwendet. Diese ist \u00fcbersichtlicher, da die drei Operationen direkt an einem Ort stehen: <pre><code>for (INITIALISIERUNG; BEDINGUNG; WERTVER\u00c4NDERUNG) \n{\n    // auszuf\u00fchrender Quellcode\n}\n</code></pre></p> <p>Jede <code>for</code>-Schleife l\u00e4sst sich in eine <code>while</code>-Schleife \u00fcbersetzen: <pre><code>INITIALISIERUNG;\n\nwhile(BEDINGUNG) \n{\n    // auszuf\u00fchrender Quellcode\n    WERTVER\u00c4NDERUNG // (immer die letzte Anweisung)\n}\n</code></pre></p>"},{"location":"grundlagen/schleifen.html#beispiele","title":"Beispiele","text":""},{"location":"grundlagen/schleifen.html#counter","title":"counter","text":"<pre><code>for (int counter = 0; counter &lt; 5; counter++) \n{\n    Console.WriteLine($\"Hello World! The counter is {counter}\");\n}\n</code></pre> Output <pre><code>Hello World! The counter is 0\nHello World! The counter is 1\nHello World! The counter is 2\nHello World! The counter is 3\nHello World! The counter is 4\n</code></pre>"},{"location":"grundlagen/schleifen.html#array","title":"Array","text":"<pre><code>string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nfor(int i = 0; i &lt; cars.Length; i++) \n{\n  Console.WriteLine(cars[i]);\n}\n</code></pre> Output <pre><code>Volvo\nBMW\nFord\nMazda\n</code></pre> <p>Diese Schleife ist equivalent zum Array-Beispiel der foreach-Schleife.</p> <p>Dieses Beispiel hat das gleiche Verhalten wie die while-Schleife, jedoch sind die Initialisierung, Bedingung und Wert\u00e4nderung an einer Stelle. Der Vorteil zeigt sich vor allem bei l\u00e4ngeren Codebl\u00f6cken, bei denen bei der <code>while</code>-Schleife erst am Ende des Blocks die Wert\u00e4nderung stattfinden w\u00fcrde.</p>"},{"location":"grundlagen/schleifen.html#foreach-schleife","title":"<code>foreach</code>-Schleife","text":"<p>Beim Iterieren von Listen und Arrays wird der Index der <code>for</code>-Schleife oft nur gef\u00fchrt, um auf ein Element zuzugreifen.</p> <p>Eine indexlose Alternative bietet die <code>foreach</code>-Schleife:</p> <pre><code>foreach(type variableName in arrayName) \n{\n    // auszuf\u00fchrender Quellcode\n}\n</code></pre> <p>In der <code>foreach</code>-Schleife wird <code>variableName</code> in jedem Durchgang mit dem n\u00e4chsten Array- bzw. Listenelement belegt.</p>"},{"location":"grundlagen/schleifen.html#beispiele_1","title":"Beispiele","text":""},{"location":"grundlagen/schleifen.html#array_1","title":"Array","text":"<pre><code>string[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\n\nforeach (string car in cars) \n{\n  Console.WriteLine(car);\n}\n</code></pre> Output <pre><code>Volvo\nBMW\nFord\nMazda\n</code></pre> <p>Diese Schleife ist equivalent zum Array-Beispiel der for-Schleife.</p>"},{"location":"grundlagen/schleifen.html#liste","title":"Liste","text":"<pre><code>List&lt;string&gt; cars = new List&lt;string&gt;;\ncars.Add(\"Volvo\");\ncars.Add(\"BMW\");\ncars.Add(\"Ford\");\ncars.Add(\"Mazda\");\n\nforeach (string car in cars) \n{\n  Console.WriteLine(car);\n}\n</code></pre> Output <pre><code>Volvo\nBMW\nFord\nMazda\n</code></pre>"},{"location":"grundlagen/string.html","title":"String","text":""},{"location":"grundlagen/string.html#initialisieren","title":"Initialisieren","text":"<pre><code>// Declare without initializing.\nstring message1;\n// Initialize with string\nstring message2 = \"World\";\n// Set string content\nmessage1 = \"Hello\";\n\n// String concatination\nmessage3 = message1 + \" \" + message2 + \"!\";\n\n// Yields the same output\nConsole.WriteLine($\"{message1} {message2}!\");\nConsole.WriteLine(message3);\n</code></pre> Output <pre><code>Hello World!\nHello World!\n</code></pre>"},{"location":"grundlagen/string.html#contains-zeichenfolge-finden","title":"Contains (Zeichenfolge finden)","text":"<p>Die Methode Contains() findet eine beliebige Zeichenfolge in einem String. Sie gibt TRUE zur\u00fcck, wenn die Zeichenfolge gefunden wurde, andernfalls FALSE. <pre><code>string s1 = \"The quick brown fox jumps over the lazy dog\";\nstring s2 = \"fox\";\nbool b = s1.Contains(s2);\nif(b) {\n    Console.WriteLine(\"Found!);\n} else {\n    Console.WriteLine(\"Not found!\");\n}\n</code></pre></p> Output <pre><code>Found!\n</code></pre>"},{"location":"grundlagen/string.html#replace-zeichen-ersetzen","title":"Replace (Zeichen ersetzen)","text":"<p>Die Methode Replace() ersetzt die angegebenen Zeichen bzw. Zeichenfolgen im angegebenen String: <pre><code>string str = \"1 2 3 4 5 6 7 8 9\";\nConsole.WriteLine($\"Original string: \\\"{str}\\\"\");\nstring str2 = str.Replace(' ', ',');\nConsole.WriteLine($\"New string:      \\\"{str}\\\"\");\n</code></pre></p> Output <pre><code>Original string: \"1 2 3 4 5 6 7 8 9\"\nNew string:      \"1,2,3,4,5,6,7,8,9\"\n</code></pre>"},{"location":"grundlagen/string.html#split-string-teilen","title":"Split (String Teilen)","text":"<p>Mit Split() wird ein String am angegebenen Zeichen aufgeteilt. Sie gibt ein Array zur\u00fcck, das die Teile des Strings ohne das Trennzeichen enth\u00e4lt. Das Trennzeichen wird dabei entfernt.</p> ToUpper, ToLower<pre><code>string s = \"You win some. You lose some.\";\n\nstring[] subs = s.Split(' ');\n\nConsole.WriteLine($\"Substring: {subs[0]}\");\nConsole.WriteLine($\"Substring: {subs[4]}\");\nConsole.WriteLine($\"Substring: {subs[5]}\");\n</code></pre> Output <pre><code>Substring: You&lt;br&gt;\nSubstring: lose&lt;br&gt;\nSubstring: some.\n</code></pre>"},{"location":"grundlagen/string.html#toupper-tolower-gro-und-kleinbuchstaben","title":"ToUpper, ToLower (Gro\u00df- und Kleinbuchstaben)","text":"<p>Mit den Methoden ToUpper() und ToLower() wird ein String in Gro\u00df- bzw. Kleinbuchstaben umgewandelt:</p> ToUpper, ToLower<pre><code>string karen = \"i wAnT tO sPEak wiTh yOuR mAnaGer\";\n\nstring upperKaren = karen.ToUpper();\nstring lowerKaren = karen.ToLower();\n\nConsole.WriteLine($\"Uppercase: {upperKaren}\");\nConsole.WriteLine($\"Lowercase: {lowerKaren}\");\n</code></pre> Output <pre><code>Uppercase: I WANT TO SPEAK WITH YOUR MANAGER\nLowercase: i want to speak with your manager\n</code></pre>"},{"location":"grundlagen/string.html#trim-uberflussige-leerzeichen-entfernen","title":"Trim (\u00dcberfl\u00fcssige Leerzeichen entfernen)","text":"<p>Mit Trim() werden Leerzeichen am Anfang bzw. am Ende entfernt. TrimStart() entfernt Leerzeichen vor dem ersten Zeichen, TrimEnd() entfernt Leerzeichen am Ende. Trim() entfernt die Leerzeichen am Anfang und am Ende.</p> Trim()<pre><code>string whiteSpace = \"    Teststring    \";\n\nstring trimStart = whiteSpace.TrimStart();\nstring trimEnd = whiteSpace.TrimEnd();\nstring trim = whiteSpace.Trim();\n\nConsole.WriteLine($\"TrimStart: \\\"{trimStart}\\\"\");\nConsole.WriteLine($\"TrimEnd: \\\"{trimEnd}\\\"\");\nConsole.WriteLine($\"Trim: \\\"{trim}\\\"\");\n</code></pre> Output <pre><code>TrimStart: \"Teststring    \"\nTrimEnd: \"    Teststring\"\nTrim: \"Teststring\"\n</code></pre>"},{"location":"reflection/index.html","title":"Einleitung zu Reflection in C","text":"<p>Reflection in C# ist ein m\u00e4chtiges Feature, das Entwicklern die M\u00f6glichkeit gibt, zur Laufzeit Informationen \u00fcber Assemblies, Module und Typen zu ermitteln und zu manipulieren. Dies umfasst die F\u00e4higkeit, Details \u00fcber Klassen, Attribute, Eigenschaften (Properties) und Methoden eines Programms zu entdecken, ohne im Vorfeld deren Namen oder Typen zu kennen. Mit Reflection k\u00f6nnen Entwickler dynamisch Instanzen von Klassen erstellen, Methoden aufrufen und auf Eigenschaften zugreifen, was f\u00fcr eine Vielzahl von Anwendungen n\u00fctzlich ist, einschlie\u00dflich der Entwicklung von Frameworks, Debugging-Tools und dynamischen Benutzeroberfl\u00e4chen.</p> <p>Reflection bietet eine introspektive F\u00e4higkeit in C#, die es erlaubt, den Typ eines Objekts zu untersuchen, auf dessen Metadaten zuzugreifen und diese Informationen zu nutzen, um Entscheidungen zur Laufzeit zu treffen. Dies bedeutet, dass Entwickler nicht nur herausfinden k\u00f6nnen, welche Klassen, Methoden oder Attribute vorhanden sind, sondern auch deren Signaturen, Zugriffsmodifikatoren, benutzerdefinierte Attribute und viele andere Details untersuchen k\u00f6nnen. </p> <p>Die Verwendung von Reflection kann jedoch auch Nachteile haben, wie z.B. Leistungseinbu\u00dfen, da der Zugriff auf Typinformationen zur Laufzeit mehr Ressourcen erfordert als der direkte Zugriff zur Kompilierungszeit. Zudem erfordert die Nutzung von Reflection ein tiefes Verst\u00e4ndnis der Struktur des Zielprogramms, was die Komplexit\u00e4t erh\u00f6hen kann. Trotz dieser Herausforderungen bleibt Reflection ein unverzichtbares Werkzeug in der Toolbox eines C#-Entwicklers, das f\u00fcr spezielle Anwendungsf\u00e4lle, wo Flexibilit\u00e4t und dynamische Typisierung erforderlich sind, von unsch\u00e4tzbarem Wert ist.</p> <p>Diese Dokumentation f\u00fchrt Sie durch die Grundlagen der Reflection in C#, einschlie\u00dflich der Untersuchung von Typen, dem Zugriff auf Attribute, Properties und Methoden sowie deren Anwendung in realen Szenarien.</p>"},{"location":"reflection/datentyp-ermitteln.html","title":"Datentyp dynamisch zur Laufzeit ermitteln","text":""},{"location":"reflection/datentyp-ermitteln.html#type-objekt","title":"Type-Objekt","text":"<p>Um den Typ eines Objekts zur Laufzeit zu ermitteln, k\u00f6nnen verschiedene Methoden verwendet werden. Diese Methoden geben ein <code>Type</code>-Objekt zur\u00fcck, das alle relevanten Metainformationen \u00fcber die Klasse bzw. das Objekt enth\u00e4lt.</p> <ul> <li><code>m.GetType()</code>: Ermittelt den Typ einer Instanz <code>m</code>.</li> <li><code>typeof(Mitarbeiter)</code>: Ermittelt den Typ der Klasse <code>Mitarbeiter</code>.</li> <li><code>Type.GetType(\"Mitarbeiter\")</code>: Ermittelt den Typ basierend auf dem qualifizierten Namen der Klasse.</li> </ul> <p>Warning</p> <p>Im ersten Schritt muss immer das Typen-Objekt erstellt werden. Dieses Objekt bildet die Grundlage zur Ermittlung der Ermittlung der Metadaten.</p>"},{"location":"reflection/datentyp-ermitteln.html#typ-eines-objekts-ermitteln","title":"Typ eines Objekts ermitteln","text":"<p>Nachdem wir die Klasse <code>Mitarbeiter</code> definiert haben, verwenden wir die Reflection-Methoden, um Metainformationen zur Laufzeit zu extrahieren.</p> <pre><code>Mitarbeiter mitarbeiter = new Mitarbeiter(\"Max\", \"Mustermann\", 50000, \"Berlin\");\n\n// Typinformationen ermitteln\nType type = mitarbeiter.GetType();\n\nConsole.WriteLine(type.ToString());\n</code></pre> Output <pre><code>Mitarbeiter\n</code></pre>"},{"location":"reflection/datentyp-ermitteln.html#getfields","title":"<code>GetFields()</code>","text":"<p>Liefert die Attribute (Felder) der Klasse zur\u00fcck.</p> <pre><code>FieldInfo[] fields = type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\nforeach (var field in fields)\n{\n    Console.WriteLine($\"{field.Name}: {field.FieldType}\");\n}\n</code></pre> Output <pre><code>_vorname: System.String\n_nachname: System.String\n_gehalt: System.Double\n_arbeitsort: System.String\n</code></pre> <p>Warning</p> <p>Beachte, dass private Felder nur mit entsprechenden <code>BindingFlags</code> sichtbar sind.</p>"},{"location":"reflection/datentyp-ermitteln.html#getproperties","title":"<code>GetProperties()</code>","text":"<p>Liefert die Properties (Eigenschaften) einer Klasse zur\u00fcck.</p> <pre><code>PropertyInfo[] properties = type.GetProperties();\nforeach (var property in properties)\n{\n    Console.WriteLine($\"{property.Name}: {property.PropertyType}\");\n}\n</code></pre> Output <pre><code>Vorname: System.String\nNachname: System.String\nGehalt: System.Double\nArbeitsort: System.String\n</code></pre>"},{"location":"reflection/datentyp-ermitteln.html#getmethods","title":"<code>GetMethods()</code>","text":"<p>Liefert die Methoden einer Klasse zur\u00fcck.</p> <pre><code>MethodInfo[] methods = type.GetMethods();\nforeach (var method in methods)\n{\n    Console.WriteLine($\"{method.Name}\");\n}\n</code></pre> Output <pre><code>AnzeigenInformationen\nErhoeheGehalt\nBerechneJahresgehalt\n</code></pre> <p>Info</p> <p>Diese Liste enth\u00e4lt auch geerbte Methoden von <code>Object</code>, wie <code>ToString</code>, <code>Equals</code> usw.</p>"},{"location":"reflection/datentyp-ermitteln.html#getconstructors","title":"<code>GetConstructors()</code>","text":"<p>Liefert die Konstruktoren einer Klasse zur\u00fcck</p> <pre><code>ConstructorInfo[] constructors = type.GetConstructors();\nforeach (var constructor in constructors)\n{\n    Console.WriteLine($\"Konstruktor: {constructor.ToString()}\");\n}\n</code></pre> Output <pre><code>Konstruktor: Void .ctor()\nKonstruktor: Void .ctor(System.String, System.String, System.Double, System.String)\n</code></pre>"},{"location":"reflection/datentyp-ermitteln.html#getparameters","title":"<code>GetParameters()</code>","text":"<p>Liefert die Paramter von Konstruktoren bzw. Methoden zur\u00fcck.</p> <pre><code>foreach (var constructor in constructors)\n{\n    ParameterInfo[] parameters = constructor.GetParameters();\n    foreach (var parameter in parameters)\n    {\n        Console.WriteLine($\"{parameter.Name}: {parameter.ParameterType}\");\n    }\n}\n</code></pre> Output <pre><code>vorname: System.String\nnachname: System.String\ngehalt: System.Double\narbeitsort: System.String\n</code></pre> <p>Tip</p> <p>Analog k\u00f6nnen die Parameter auch f\u00fcr Methoden ausgegeben werden!</p>"},{"location":"reflection/klasse-mitarbeiter.html","title":"Klasse Mitarbeiter","text":"<p>Dieses Kapitel verwendet die Beispielklasse <code>Mitarbeiter</code> mit privaten Attributen, die durch Properties zug\u00e4nglich gemacht werden, sowie mit Konstruktoren und Methoden, um die Nutzung von Reflection zu demonstrieren.</p> <pre><code>classDiagram\n    class Mitarbeiter {\n        - string _vorname\n        - string _nachname\n        - double _gehalt\n        - string _arbeitsort\n        \u00abproperty\u00bb + string Vorname\n        \u00abproperty\u00bb + string Nachname\n        \u00abproperty\u00bb + double Gehalt\n        \u00abproperty\u00bb + string Arbeitsort\n        + Mitarbeiter()\n        + Mitarbeiter(string vorname, string nachname, double gehalt, string arbeitsort)\n        + void AnzeigenInformationen()\n        + void ErhoeheGehalt(double betrag)\n        + double BerechneJahresgehalt()\n    }</code></pre>"},{"location":"reflection/objekte-erstellen.html","title":"Objekte zur Laufzeit erstellen","text":"<p>Ein zentraler Aspekt von Reflection in C# ist die F\u00e4higkeit, Objekte zur Laufzeit zu erstellen. Diese F\u00e4higkeit ist besonders n\u00fctzlich in Szenarien, in denen Typen dynamisch zur Laufzeit geladen oder instanziiert werden m\u00fcssen, ohne dass sie zur Kompilierungszeit bekannt sind. Ein h\u00e4ufig verwendetes Werkzeug daf\u00fcr ist die Klasse <code>Activator</code>, die Teil des .NET Frameworks ist.</p>"},{"location":"reflection/objekte-erstellen.html#verwendung-des-activators","title":"Verwendung des Activators","text":"<p>Die <code>Activator</code>-Klasse bietet mehrere Methoden, um Instanzen von Typen zur Laufzeit zu erstellen. Eine der gebr\u00e4uchlichsten Methoden ist <code>CreateInstance</code>. Diese Methode hat mehrere \u00dcberladungen, die es erm\u00f6glichen, Objekte auf verschiedene Arten zu instanziieren, unter anderem durch Angabe des Typs, der Parameter f\u00fcr den Konstruktor und sogar durch Angabe des Assemblynamens, in dem sich der Typ befindet.</p> <p>Um ein Objekt vom Typ <code>Mitarbeiter</code> zur Laufzeit zu erstellen, k\u00f6nnen wir folgenden Ansatz verfolgen:</p> <pre><code>// Erstellen eines Objekts vom Typ Mitarbeiter ohne Parameter (nutzt den Standardkonstruktor)\nMitarbeiter mitarbeiter1 = (Mitarbeiter)Activator.CreateInstance(typeof(Mitarbeiter));\n// Initialisierung der Attribute f\u00fcr mitarbeiter1\nmitarbeiter1.Vorname = \"Anna\";\nmitarbeiter1.Nachname = \"M\u00fcller\";\nmitarbeiter1.Gehalt = 40000.0;\nmitarbeiter1.Arbeitsort = \"Hamburg\";\n\n// Erstellen eines Objekts vom Typ Mitarbeiter mit Parametern f\u00fcr den Konstruktor\nobject[] parameters = { \"Max\", \"Mustermann\", 50000.0, \"Berlin\" };\nMitarbeiter mitarbeiter2 = (Mitarbeiter)Activator.CreateInstance(typeof(Mitarbeiter), parameters);\n\n// Ausgabe zur Demonstration\nmitarbeiter1.AnzeigenInformationen();\nmitarbeiter2.AnzeigenInformationen();\n</code></pre> Output <pre><code>Vorname: Anna, Nachname: M\u00fcller, Gehalt: 40000, Arbeitsort: Hamburg\nVorname: Max, Nachname: Mustermann, Gehalt: 50000, Arbeitsort: Berlin\n</code></pre>"},{"location":"reflection/objekte-erstellen.html#erklarung","title":"Erkl\u00e4rung","text":"<ul> <li> <p><code>Activator.CreateInstance(typeof(Mitarbeiter))</code>: Diese Zeile erstellt eine neue Instanz von <code>Mitarbeiter</code> unter Verwendung des Standardkonstruktors. Da <code>CreateInstance</code> ein Objekt vom Typ <code>object</code> zur\u00fcckgibt, ist ein explizites Casting auf den Typ <code>Mitarbeiter</code> notwendig.</p> </li> <li> <p><code>Activator.CreateInstance(typeof(Mitarbeiter), parameters)</code>: Hier wird eine neue Instanz von <code>Mitarbeiter</code> erstellt, wobei ein Array von Objekten als Parameter f\u00fcr den Konstruktor \u00fcbergeben wird. Diese Methode ist n\u00fctzlich, wenn der zu verwendende Konstruktor Parameter erwartet. Auch hier ist ein Casting erforderlich.</p> </li> </ul>"},{"location":"reflection/objekte-erstellen.html#vorteile-und-uberlegungen","title":"Vorteile und \u00dcberlegungen","text":"<p>Die Verwendung des <code>Activator</code> zum Erstellen von Objekten bietet eine flexible L\u00f6sung f\u00fcr die dynamische Instanziierung von Klassen zur Laufzeit. Dies kann in Situationen n\u00fctzlich sein, in denen der exakte Typ eines Objekts erst zur Laufzeit bekannt ist, beispielsweise beim Laden von Plugins oder bei der Implementierung von Fabrikmethoden in Designmustern.</p> <p>Es ist jedoch wichtig zu beachten, dass der Einsatz von Reflection und insbesondere des <code>Activator</code> zur Objekterstellung Overhead verursacht und die Performance beeintr\u00e4chtigen kann. Deshalb sollte der Einsatz wohl\u00fcberlegt und in Performance-kritischen Bereichen vermieden oder minimiert werden.</p>"},{"location":"reflection/objekte-erstellen.html#dynamische-wertzuweisung-zu-properties-von-objekten","title":"Dynamische Wertzuweisung zu Properties von Objekten","text":"<p>In Szenarien, wo die Properties eines Objekts zur Laufzeit nicht bekannt sind, bietet Reflection in C# die M\u00f6glichkeit, dynamisch auf diese Properties zuzugreifen und ihnen Werte zuzuweisen. Dies kann besonders n\u00fctzlich sein, wenn man mit Objekten arbeitet, deren Struktur erst zur Laufzeit bestimmt wird, wie es beispielsweise bei der dynamischen Erzeugung von Objekten aus Datenbankabfragen oder bei der Deserialisierung von JSON-Objekten der Fall ist.</p> <p>Um dieses Konzept zu demonstrieren, verwenden wir wieder die <code>Mitarbeiter</code>-Klasse. Wir zeigen, wie man die Properties eines <code>Mitarbeiter</code>-Objekts dynamisch abfragen und mit Standardwerten initialisieren kann.</p>"},{"location":"reflection/objekte-erstellen.html#dynamische-initialisierung-von-properties","title":"Dynamische Initialisierung von Properties","text":"<p>Der Schl\u00fcssel zur dynamischen Arbeit mit Properties ist die Verwendung der <code>GetProperty</code>- und <code>SetValue</code>-Methoden des <code>Type</code>-Objekts, die \u00fcber Reflection zug\u00e4nglich sind. Hier ist ein grundlegendes Beispiel, das die Properties mit Standardwerten belegt:</p> <pre><code>// Erstellen eines Objekts vom Typ Mitarbeiter zur Laufzeit\nMitarbeiter mitarbeiter = (Mitarbeiter)Activator.CreateInstance(typeof(Mitarbeiter));\n\n// Dynamische Initialisierung von Properties\nPropertyInfo[] properties = typeof(Mitarbeiter).GetProperties();\nforeach (var property in properties)\n{\n    if (property.PropertyType == typeof(string))\n    {\n        property.SetValue(mitarbeiter, \"Standardwert\");\n    }\n    else if (property.PropertyType == typeof(double))\n    {\n        property.SetValue(mitarbeiter, 0.0);\n    }\n    // F\u00fcgen Sie hier weitere Typ\u00fcberpr\u00fcfungen und -zuweisungen hinzu, je nach Bedarf\n}\n\n// Ausgabe zur Demonstration der dynamischen Initialisierung\nmitarbeiter.AnzeigenInformationen();\n</code></pre> Output <pre><code>Vorname: Standardwert, Nachname: Standardwert, Gehalt: 0, Arbeitsort: Standardwert\n</code></pre>"},{"location":"reflection/objekte-erstellen.html#erklarung_1","title":"Erkl\u00e4rung","text":"<ul> <li>Zun\u00e4chst wird ein <code>Mitarbeiter</code>-Objekt zur Laufzeit erstellt.</li> <li>Anschlie\u00dfend wird das <code>Type</code>-Objekt des <code>Mitarbeiter</code>-Typs verwendet, um alle \u00f6ffentlichen Properties zu erhalten.</li> <li>F\u00fcr jede Property wird \u00fcberpr\u00fcft, welchen Typ sie hat (<code>string</code>, <code>double</code> usw.), und es wird ein entsprechender Standardwert zugewiesen. Im Beispiel wird allen <code>string</code>-Properties der Wert <code>\"Standardwert\"</code> und allen <code>double</code>-Properties der Wert <code>0.0</code> zugewiesen.</li> <li>Schlie\u00dflich wird eine Methode des Objekts aufgerufen, um die Ergebnisse der dynamischen Property-Zuweisungen zu \u00fcberpr\u00fcfen.</li> </ul>"},{"location":"reflection/objekte-erstellen.html#wichtig-zu-beachten","title":"Wichtig zu beachten","text":"<ul> <li>Diese Methode der dynamischen Wertzuweisung ist sehr flexibel, kann aber auch fehleranf\u00e4llig sein, wenn die Typen der Properties nicht korrekt gehandhabt werden.</li> <li>Reflection kann die Performance beeintr\u00e4chtigen, daher sollte sie mit Bedacht eingesetzt werden, insbesondere in leistungskritischen Anwendungen.</li> <li>Die Sicherheit des Zugriffs auf Properties sollte ebenfalls ber\u00fccksichtigt werden, da die Verwendung von Reflection potenziell unsichere oder unerw\u00fcnschte Zugriffe auf Objekte erm\u00f6glichen kann.</li> </ul> <p>Diese Technik erm\u00f6glicht es Entwicklern, sehr dynamisch mit Objekten zu arbeiten, deren Struktur im Voraus nicht vollst\u00e4ndig bekannt ist, und bietet eine m\u00e4chtige Methode zur Laufzeitmanipulation und -initialisierung von Objekten in C#.</p>"},{"location":"ui/index.html","title":"Oberfl\u00e4chenprogrammierung Einf\u00fchrung","text":""},{"location":"ui/index.html#was-ist-wpf","title":"Was ist WPF?","text":"<p>Windows Presentation Foundation (WPF) ist ein grafisches Subsystem von Microsoft, das f\u00fcr die Entwicklung von Benutzeroberfl\u00e4chen f\u00fcr Windows-Anwendungen verwendet wird. Es wurde erstmals mit .NET Framework 3.0 eingef\u00fchrt und bietet eine moderne Alternative zur klassischen Windows Forms-Technologie. WPF verwendet XAML (Extensible Application Markup Language) zur Beschreibung der Benutzeroberfl\u00e4che und erm\u00f6glicht die Trennung von UI-Design und Gesch\u00e4ftslogik.</p> <p>Note</p> <p>WPF bietet zahlreiche Vorteile wie Datenbindung, Vorlagen, Animationen und Medienintegration, die es Entwicklern erleichtern, reichhaltige und interaktive Benutzeroberfl\u00e4chen zu erstellen.</p>"},{"location":"ui/index.html#was-ist-mvvm","title":"Was ist MVVM?","text":"<p>MVVM (Model-View-ViewModel) ist ein Architekturdesignmuster, das speziell f\u00fcr die Trennung der Entwicklungsaufgaben bei der Erstellung von Anwendungen mit grafischen Benutzeroberfl\u00e4chen entwickelt wurde. MVVM trennt die Benutzeroberfl\u00e4che (View), die Gesch\u00e4ftslogik (Model) und die Vermittlung zwischen beiden (ViewModel).</p> <p></p> <ul> <li>Model: Repr\u00e4sentiert die Daten und Gesch\u00e4ftslogik der Anwendung. Es enth\u00e4lt die Gesch\u00e4ftsregeln und die Datenvalidierung.</li> <li>View: Repr\u00e4sentiert die Benutzeroberfl\u00e4che. Sie zeigt die Daten des Models an und sendet Benutzeraktionen an das ViewModel.</li> <li>ViewModel: Vermittelt zwischen Model und View. Es h\u00e4lt die Zust\u00e4nde der View, verarbeitet Benutzerinteraktionen und aktualisiert das Model.</li> </ul>"},{"location":"ui/index.html#warum-mvvm-in-wpf-verwenden","title":"Warum MVVM in WPF verwenden?","text":"<p>MVVM ist besonders gut f\u00fcr WPF-Anwendungen geeignet, da es die Vorteile der WPF-Datenbindung voll aussch\u00f6pft und eine klare Trennung der Verantwortlichkeiten erm\u00f6glicht. Durch die Verwendung von MVVM k\u00f6nnen Entwickler:</p> <ul> <li>Wiederverwendbare Komponenten erstellen: Da die Logik im ViewModel und nicht in der View enthalten ist, k\u00f6nnen Komponenten leichter wiederverwendet werden.</li> <li>Bessere Testbarkeit erreichen: Gesch\u00e4ftslogik und Benutzerschnittstelle sind getrennt, was Unit-Tests erleichtert.</li> <li>Verbesserte Wartbarkeit erzielen: Der Code ist modularer und daher einfacher zu verstehen und zu warten.</li> </ul> <p>Info</p> <p>Die Trennung von Gesch\u00e4ftslogik und UI-Code f\u00fchrt zu einer saubereren Architektur und f\u00f6rdert die Single Responsibility Principle (SRP).</p>"},{"location":"ui/button_binding.html","title":"Button binden","text":"<p>In diesem Abschnitt erkl\u00e4ren wir, wie Sie einen Button in Ihrer WPF-Anwendung binden und eine Methode im ViewModel aufrufen k\u00f6nnen, um den Text eines Labels zu \u00e4ndern.</p>"},{"location":"ui/button_binding.html#methode-im-viewmodel-definieren","title":"Methode im ViewModel definieren","text":"<p>Zuerst definieren wir eine Methode in der Klasse <code>MainWindowViewModel</code>, die den Text des Labels \u00e4ndert. F\u00fcgen Sie den folgenden Code in <code>MainWindowViewModel.cs</code> ein:</p> <pre><code>namespace WpfApp1\n{\n    public class MainWindowViewModel : INotifyPropertyChanged\n    {\n\n        // Private Variable f\u00fcr den Label-Inhalt\n        private string labelTest = \"TestLabel\";\n\n        // \u00d6ffentliche Eigenschaft f\u00fcr den Label-Inhalt\n        public string LabelTest\n        {\n            get =&gt; labelTest;\n            set\n            {\n                labelTest = value;\n            }\n        }\n\n        // Methode zum \u00c4ndern des Textes\n        public void ChangeText()\n        {\n            LabelTest = \"Text Changed!!!\";\n        }\n\n        // Deklarieren des PropertyChanged-Ereignisses\n        public event PropertyChangedEventHandler? PropertyChanged;\n\n        // OnPropertyChanged l\u00f6st das PropertyChanged-Ereignis aus und \u00fcbergibt\n        // die Quelleigenschaft, die aktualisiert wird.\n        protected void OnPropertyChanged(string propertyName)\n        {\n            if (this.PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n\n    }\n}\n</code></pre> <p>Note</p> <p>Die Methode <code>ChangeText</code> im ViewModel hat einen allgemein g\u00fcltigen Namen, da das ViewModel nicht wei\u00df, wann der Text ge\u00e4ndert wird. Diese Logik wird in der UI festgelegt.</p>"},{"location":"ui/button_binding.html#button-click-event-im-xaml-definieren","title":"Button-Click-Event im XAML definieren","text":"<p>Um zu definieren, dass bei einem Button-Click die Methode des ViewModels aufgerufen wird, m\u00fcssen wir das Click-Event des Buttons festlegen. Durch Doppelklick auf den Button im Designer wird f\u00fcr Sie automatisch eine Funktion angelegt.</p> Note <p>Alternativ k\u00f6nnen Sie die Methode selbst definieren und den Tag manuell im xaml hinzuf\u00fcgen:</p> <pre><code>&lt;Button Content=\"Beispiel-Button\" ... Click=\"Button_Click\"/&gt;\n</code></pre>"},{"location":"ui/button_binding.html#event-handler-im-code-behind-erstellen","title":"Event-Handler im Code-Behind erstellen","text":"<p>Durch einen Doppelklick auf den Button im Designer wird automatisch eine Funktion im Code-Behind erstellt, die immer aufgerufen wird, wenn der Button geklickt wird. Der Code-Behind geh\u00f6rt direkt zur Oberfl\u00e4che und enth\u00e4lt Logik, die mit der Benutzeroberfl\u00e4che interagiert.</p> <p>Hier ist der Code, der im <code>MainWindow.xaml.cs</code> hinzugef\u00fcgt wird:</p> <pre><code>using System.Windows;\n\nnamespace WpfApp1\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n            MainWindowViewModel viewModel = (MainWindowViewModel)FindResource(\"mwvm\");\n\n            viewModel.ChangeText();\n        }\n    }\n}\n</code></pre> <p>Info</p> <p>Dieser Code wird im Code-Behind erstellt, der direkt zur Oberfl\u00e4che geh\u00f6rt. Er enth\u00e4lt die Logik, die beim Klicken des Buttons ausgef\u00fchrt wird.</p>"},{"location":"ui/button_binding.html#erklarung-des-codes","title":"Erkl\u00e4rung des Codes","text":"<ul> <li>Click-Event im Button: Das <code>Click</code>-Attribut des <code>Button</code>-Elements ist auf <code>Button_Click</code> gesetzt. Dies bedeutet, dass die Methode <code>Button_Click</code> im Code-Behind aufgerufen wird, wenn der Button geklickt wird.</li> <li>Button_Click-Methode im Code-Behind: In der <code>Button_Click</code>-Methode suchen wir das ViewModel-Objekt mithilfe der <code>FindResource</code>-Methode. Dadurch erhalten wir das bereits instanziierte ViewModel, das wir in <code>App.xaml</code> definiert haben.</li> <li>ViewModel-Methode aufrufen: Nachdem wir das ViewModel-Objekt gefunden haben, k\u00f6nnen wir die Methode <code>ChangeText</code> des ViewModels aufrufen, um den Text des Labels zu \u00e4ndern. Es ist wichtig, dass wir kein neues ViewModel erstellen (also nicht <code>new MainWindowViewModel</code>), sondern das bestehende Objekt verwenden.</li> </ul> <p>Durch das Binden des Buttons und das Aufrufen der Methode im ViewModel k\u00f6nnen wir eine lose Kopplung zwischen der Benutzeroberfl\u00e4che und der Gesch\u00e4ftslogik erreichen, was die Wartbarkeit und Flexibilit\u00e4t Ihrer Anwendung verbessert.</p> <p>Bug</p> <p>Wenn Sie den Code jetzt ausf\u00fchren, wird der Text noch nicht ge\u00e4ndert. Das liegt daran, dass die Oberfl\u00e4che nicht mitbekommt, dass sich der Inhalt des Labels ge\u00e4ndert hat.</p>"},{"location":"ui/button_binding.html#eigenschaftsanderungen-im-viewmodel-benachrichtigen","title":"Eigenschafts\u00e4nderungen im ViewModel benachrichtigen","text":"<p>Wenn das Programm so ausgef\u00fchrt wird, wird das Label noch nicht ge\u00e4ndert. Zur Erinnerung: Die UI kann die Methoden des ViewModels verwenden, jedoch kennt das ViewModel die UI nicht. Das stellt sicher, dass die UI austauschbar bleibt.</p> <p>Wenn sich eine Eigenschaft im ViewModel \u00e4ndert, m\u00fcssen wir der UI Bescheid geben. Daf\u00fcr verwenden wir die <code>OnPropertyChanged()</code>-Methode.</p> <p>Da wir bereits einen Setter haben, der zum Setzen des Inhalts verwendet wird, k\u00f6nnen wir direkt diesen Setter verwenden und dort die <code>OnPropertyChanged</code>-Methode einf\u00fcgen:</p> <pre><code>// in MainWindowViewModel\n\n    // \u00d6ffentliche Eigenschaft f\u00fcr den Label-Inhalt\n    public string LabelTest\n    {\n        get =&gt; labelTest;\n        set\n        {\n            labelTest = value;\n            OnPropertyChanged(nameof(LabelTest)); // UI \u00fcber die \u00c4nderung benachrichtigen\n        }\n    }\n</code></pre> <p>Durch das Hinzuf\u00fcgen des Aufrufs <code>OnPropertyChanged(nameof(LabelTest))</code> im Setter der <code>LabelTest</code>-Eigenschaft wird die UI automatisch benachrichtigt, wenn sich der Wert der Eigenschaft \u00e4ndert. Dadurch wird die Bindung aktualisiert und der neue Wert in der UI angezeigt.</p> Example <p></p>"},{"location":"ui/create_wpf_project.html","title":"Erstellung eines WPF-Projekts","text":"<p>Zum erstellen eines WPF-Projekts gehen wir wie gewohnt vor. Einziger Unterschied ist, dass wir bei der Auswahl des Templates \"WPF Applicaton\" ausw\u00e4hlen.</p> <p></p>"},{"location":"ui/databinding.html","title":"Datenbindung","text":"<p>Datenbindung ist ein zentrales Konzept in WPF, das es erm\u00f6glicht, die Benutzeroberfl\u00e4che (View) mit der Gesch\u00e4ftslogik (Model) zu verbinden. Dies wird oft im Rahmen des MVVM-Modells (Model-View-ViewModel) umgesetzt.</p>"},{"location":"ui/databinding.html#mvvm-modell","title":"MVVM-Modell","text":"<p>MVVM (Model-View-ViewModel) ist ein Architekturdesignmuster, das speziell f\u00fcr die Entwicklung von WPF-Anwendungen entwickelt wurde. Es trennt die Logik der Anwendung in drei Hauptkomponenten:</p> <ul> <li>Model: Repr\u00e4sentiert die Daten und die Gesch\u00e4ftslogik der Anwendung.</li> <li>View: Repr\u00e4sentiert die Benutzeroberfl\u00e4che. Sie zeigt die Daten des Models an und sendet Benutzeraktionen an das ViewModel.</li> <li>ViewModel: Vermittelt zwischen Model und View. Es h\u00e4lt die Zust\u00e4nde der View, verarbeitet Benutzerinteraktionen und aktualisiert das Model.</li> </ul>"},{"location":"ui/databinding.html#erstellen-einer-klasse-mainwindowviewmodelcs","title":"Erstellen einer Klasse \"MainWindowViewModel.cs\"","text":"<p>Um die Datenbindung in einer WPF-Anwendung zu implementieren, erstellen wir eine ViewModel-Klasse. F\u00fchren Sie die folgenden Schritte aus, um eine neue Klasse \"MainWindowViewModel.cs\" hinzuzuf\u00fcgen:</p> <ol> <li>Rechtsklick auf das Projekt im Projektmappen-Explorer.</li> <li>W\u00e4hlen Sie Hinzuf\u00fcgen &gt; Klasse....</li> <li>Benennen Sie die Klasse <code>MainWindowViewModel.cs</code>.</li> </ol> <p>F\u00fcgen Sie den folgenden Code in die Datei <code>MainWindowViewModel.cs</code> ein:</p> <pre><code>using System.ComponentModel;\n\nnamespace WpfApp1\n{\n    public class MainWindowViewModel : INotifyPropertyChanged\n    {\n        // Deklarieren des PropertyChanged-Ereignisses\n        public event PropertyChangedEventHandler? PropertyChanged;\n\n        // OnPropertyChanged l\u00f6st das PropertyChanged-Ereignis aus und \u00fcbergibt\n        // die Quelleigenschaft, die aktualisiert wird.\n        protected void OnPropertyChanged(string propertyName)\n        {\n            if (this.PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ui/databinding.html#erklarung-des-codes","title":"Erkl\u00e4rung des Codes","text":"<ul> <li>INotifyPropertyChanged: Ein Interface, das eine Benachrichtigung bereitstellt, wenn sich der Wert einer Eigenschaft \u00e4ndert. Dies ist wichtig f\u00fcr die Datenbindung.</li> <li>PropertyChanged-Ereignis: Ein Ereignis, das ausgel\u00f6st wird, wenn sich der Wert einer Eigenschaft \u00e4ndert.</li> <li>OnPropertyChanged-Methode: Eine Methode, die das <code>PropertyChanged</code>-Ereignis ausl\u00f6st und den Namen der ge\u00e4nderten Eigenschaft \u00fcbergibt.</li> </ul>"},{"location":"ui/databinding.html#das-propertychanged-ereignis-im-detail","title":"Das PropertyChanged-Ereignis im Detail","text":"<p>Das PropertyChanged-Ereignis spielt eine entscheidende Rolle in der Kommunikation zwischen dem ViewModel und der View. Das ViewModel kennt die Funktionalit\u00e4t der View nicht direkt, und dies erm\u00f6glicht eine lose Kopplung zwischen beiden Komponenten. Wenn sich der Wert einer Eigenschaft im ViewModel \u00e4ndert, wird das PropertyChanged-Ereignis ausgel\u00f6st. Die View, die an diese Eigenschaft gebunden ist, wird benachrichtigt und kann entsprechend reagieren, z.B. durch das Aktualisieren der Anzeige.</p> <p> </p> <p>Diese lose Kopplung ist wichtig, weil:</p> <ul> <li>Trennung der Verantwortlichkeiten: Die View kennt die Funktionen des ViewModels und kann sie aufrufen, um Daten anzuzeigen oder Benutzerinteraktionen zu verarbeiten. Das ViewModel kennt jedoch die Details der View nicht und ist nicht daf\u00fcr verantwortlich, wie die Daten angezeigt werden.</li> <li>Flexibilit\u00e4t und Wiederverwendbarkeit: Durch die Entkopplung der View und des ViewModels k\u00f6nnen Sie die Benutzeroberfl\u00e4che \u00e4ndern, ohne die Gesch\u00e4ftslogik zu beeinflussen, und umgekehrt.</li> </ul>"},{"location":"ui/databinding.html#instanziieren-der-viewmodel-klasse-in-appxaml","title":"Instanziieren der ViewModel-Klasse in App.xaml","text":"<p>Damit die <code>MainWindowViewModel</code>-Klasse in der Anwendung verwendet werden kann, m\u00fcssen wir sie in der <code>App.xaml</code>-Datei instanziieren. Hier ist der Code, der in <code>App.xaml</code> eingef\u00fcgt werden muss:</p> <pre><code>&lt;Application x:Class=\"WpfApp1.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:local=\"clr-namespace:WpfApp1\"\n             StartupUri=\"MainWindow.xaml\"&gt;\n    &lt;Application.Resources&gt;\n        &lt;local:MainWindowViewModel x:Key=\"mwvm\"/&gt;\n    &lt;/Application.Resources&gt;\n&lt;/Application&gt;\n</code></pre> <p>Bug</p> <p>Die hinzugef\u00fcgte Zeile wird von der IDE beim ersten Hinzuf\u00fcgen in der Regel als fehlerhaft makiert. Starten Sie die Anwendung einmal, damit dieser Fehler nicht mehr auftritt.</p>"},{"location":"ui/databinding.html#erklarung-des-inhalts-von-applicationresources","title":"Erkl\u00e4rung des Inhalts von Application.Resources","text":"<ul> <li>Application.Resources: Ein Bereich, in dem Ressourcen definiert werden, die in der gesamten Anwendung verwendet werden k\u00f6nnen.</li> <li>local:MainWindowViewModel: Instanziiert die <code>MainWindowViewModel</code>-Klasse.</li> <li>x:Key: Ein eindeutiger Schl\u00fcssel, mit dem die Ressource referenziert werden kann.</li> </ul> <p>Durch das Hinzuf\u00fcgen des ViewModels zu den Anwendungsressourcen k\u00f6nnen wir es in der gesamten Anwendung verwenden und an die UI-Elemente binden.</p> <p>Info</p> <p>Durch die Verwendung des MVVM-Musters und die Implementierung der Datenbindung in WPF k\u00f6nnen Sie die Benutzeroberfl\u00e4che und die Gesch\u00e4ftslogik klar trennen. Dies erleichtert die Wartbarkeit und Testbarkeit Ihrer Anwendung erheblich.</p>"},{"location":"ui/elemente.html","title":"Steuerelemente und Layout","text":"<p>In WPF k\u00f6nnen verschiedene Steuerelemente und Layout-Container verwendet werden, um die Benutzeroberfl\u00e4che einer Anwendung zu erstellen. In Visual Studio k\u00f6nnen Sie diese Elemente einfach aus der Toolbox in das Fenster ziehen. Diese Elemente erscheinen dann sowohl in der visuellen Oberfl\u00e4che als auch im XAML-Code.</p>"},{"location":"ui/elemente.html#verwendung-der-toolbox","title":"Verwendung der Toolbox","text":"<p>Die Toolbox in Visual Studio enth\u00e4lt eine Vielzahl von Steuerelementen, die Sie in Ihre WPF-Anwendung einf\u00fcgen k\u00f6nnen. Zu den h\u00e4ufig verwendeten Steuerelementen geh\u00f6ren Labels, Buttons, TextBoxen und viele mehr. Um ein Steuerelement hinzuzuf\u00fcgen, ziehen Sie es einfach aus der Toolbox in das Fenster im Designer.</p> <p></p>"},{"location":"ui/elemente.html#beispiel","title":"Beispiel","text":"<p>Der folgende XAML-Code zeigt ein einfaches Beispiel, bei dem ein <code>Label</code> und ein <code>Button</code> in einem <code>Grid</code>-Layout-Container verwendet werden. Diese Elemente wurden aus der Toolbox in das Fenster gezogen.</p> <pre><code>&lt;Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApp1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\"&gt;\n    &lt;Grid&gt;\n        &lt;Label Content=\"Beispieltext im Label\" FontSize=\"30\" HorizontalAlignment=\"Center\" Margin=\"0,67,0,0\" VerticalAlignment=\"Top\"/&gt;\n        &lt;Button Content=\"Beispiel-Button\" FontSize=\"30\" HorizontalAlignment=\"Center\" Margin=\"0,217,0,0\" VerticalAlignment=\"Top\" Height=\"110\" Width=\"278\"/&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre>"},{"location":"ui/elemente.html#erklarung-des-codes","title":"Erkl\u00e4rung des Codes","text":"<ul> <li>Window: Das grundlegende Container-Element f\u00fcr die Benutzeroberfl\u00e4che der Anwendung. Es definiert das Hauptfenster.</li> <li>Grid: Ein Layout-Container, der eine flexible Anordnung der UI-Elemente erm\u00f6glicht. Elemente k\u00f6nnen in Zeilen und Spalten angeordnet werden.</li> <li>Label: Ein einfaches Steuerelement zur Anzeige von Text.<ul> <li><code>Content</code>: Der anzuzeigende Text.</li> <li><code>FontSize</code>: Die Schriftgr\u00f6\u00dfe des Textes.</li> <li><code>HorizontalAlignment</code> und <code>VerticalAlignment</code>: Die Ausrichtung des Labels innerhalb des Grid.</li> <li><code>Margin</code>: Der Abstand um das Label.</li> </ul> </li> <li>Button: Ein Steuerelement, das eine Aktion ausl\u00f6st, wenn es angeklickt wird.<ul> <li><code>Content</code>: Der Text, der auf dem Button angezeigt wird.</li> <li><code>FontSize</code>: Die Schriftgr\u00f6\u00dfe des Textes.</li> <li><code>HorizontalAlignment</code> und <code>VerticalAlignment</code>: Die Ausrichtung des Buttons innerhalb des Grid.</li> <li><code>Height</code> und <code>Width</code>: Die H\u00f6he und Breite des Buttons.</li> </ul> </li> </ul> <p>Info</p> <p>Durch das Ziehen von Steuerelementen aus der Toolbox in das Fenster im Designer werden diese Elemente automatisch im XAML-Code der entsprechenden Datei eingef\u00fcgt. Dies erm\u00f6glicht eine visuelle Bearbeitung der Benutzeroberfl\u00e4che und eine einfache Anpassung des Layouts und der Steuerelemente.</p>"},{"location":"ui/label_binding.html","title":"Daten an ein Element binden","text":"<p>In diesem Abschnitt erkl\u00e4ren wir, wie Sie Daten an ein Element in Ihrer WPF-Anwendung binden k\u00f6nnen. Wir verwenden dazu das <code>Label</code> und den <code>Button</code>, die wir bereits in unserem Beispiel verwendet haben.</p>"},{"location":"ui/label_binding.html#variable-fur-den-inhalt-im-viewmodel-anlegen","title":"Variable f\u00fcr den Inhalt im ViewModel anlegen","text":"<p>Zuerst m\u00fcssen wir im <code>MainWindowViewModel</code> eine Variable f\u00fcr den Inhalt anlegen. F\u00fcgen Sie dazu den folgenden Code in <code>MainWindowViewModel.cs</code> ein:</p> <pre><code>namespace WpfApp1\n{\n    public class MainWindowViewModel : INotifyPropertyChanged\n    {\n        // Private Variable f\u00fcr den Label-Inhalt\n        private string labelTest = \"TestLabel\";\n\n        // \u00d6ffentliche Eigenschaft f\u00fcr den Label-Inhalt\n        public string LabelTest\n        {\n            get =&gt; labelTest;\n            set\n            {\n                labelTest = value;\n            }\n        }\n\n        // Deklarieren des PropertyChanged-Ereignisses\n        public event PropertyChangedEventHandler? PropertyChanged;\n\n        // OnPropertyChanged l\u00f6st das PropertyChanged-Ereignis aus und \u00fcbergibt\n        // die Quelleigenschaft, die aktualisiert wird.\n        protected void OnPropertyChanged(string propertyName)\n        {\n            if (this.PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ui/label_binding.html#datacontext-im-grid-des-mainwindow-setzen","title":"DataContext im Grid des MainWindow setzen","text":"<p>Damit wir das ViewModel in der Benutzeroberfl\u00e4che verwenden k\u00f6nnen, muss es im <code>Grid</code> des <code>MainWindow</code> deklariert werden. \u00c4ndern Sie den XAML-Code von <code>MainWindow.xaml</code> wie folgt:</p> <pre><code>&lt;!-- App.xaml --&gt;\n&lt;Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApp1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\"&gt;\n    &lt;Grid DataContext=\"{StaticResource mwvm}\"&gt;\n        &lt;Label Content=\"{Binding LabelTest}\" FontSize=\"30\" HorizontalAlignment=\"Center\" Margin=\"0,67,0,0\" VerticalAlignment=\"Top\"/&gt;\n        &lt;Button Content=\"Beispiel-Button\" FontSize=\"30\" HorizontalAlignment=\"Center\" Margin=\"0,217,0,0\" VerticalAlignment=\"Top\" Height=\"110\" Width=\"278\"/&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre>"},{"location":"ui/label_binding.html#erklarung","title":"Erkl\u00e4rung","text":"<p>Wir haben das MainWindowViewModel \"mwvm\" bereits instanziiert. Dies k\u00f6nnen wir nun in unserer Anwendung verwenden.</p> <ul> <li>DataContext setzen: Durch das Setzen des <code>DataContext</code> im <code>Grid</code> auf <code>{StaticResource mwvm}</code> wird das <code>MainWindowViewModel</code> als Datenkontext f\u00fcr alle untergeordneten Elemente des <code>Grid</code> festgelegt. Dadurch k\u00f6nnen die UI-Elemente auf die Eigenschaften des ViewModels zugreifen.</li> </ul>"},{"location":"ui/label_binding.html#inhalt-des-labels-an-die-variable-des-viewmodels-binden","title":"Inhalt des Labels an die Variable des ViewModels binden","text":"<p>Nun k\u00f6nnen wir den Inhalt des Labels auf die Variable des ViewModels binden. \u00c4ndern Sie den <code>Label</code>-Tag wie folgt:</p> <pre><code>&lt;Label Content=\"{Binding LabelTest}\" FontSize=\"30\" HorizontalAlignment=\"Center\" Margin=\"0,67,0,0\" VerticalAlignment=\"Top\"/&gt;\n</code></pre>"},{"location":"ui/label_binding.html#erklarung_1","title":"Erkl\u00e4rung","text":"<ul> <li>Binding: Das <code>Content</code>-Attribut des <code>Label</code>-Elements ist an die Eigenschaft <code>LabelTest</code> des ViewModels gebunden. Dies bedeutet, dass der Text des Labels automatisch den Wert der <code>LabelTest</code>-Eigenschaft anzeigt.</li> </ul> <p>Tip</p> <p>Eigentlich k\u00f6nnen alle Eigenschaften von XAML-Elementen an Eigenschaften des ViewModels gebunden werden. In diesem Beispiel binden wir den <code>Content</code>, der beschreibt, welchen Text das Label beinhaltet. Sie k\u00f6nnten jedoch auch andere Eigenschaften wie <code>FontSize</code>, <code>Visibility</code> usw. binden.</p> <p>Durch die Verwendung von Datenbindung k\u00f6nnen Sie eine lose Kopplung zwischen der Benutzeroberfl\u00e4che und der Gesch\u00e4ftslogik erreichen, was die Wartbarkeit und Flexibilit\u00e4t Ihrer Anwendung verbessert.</p>"},{"location":"ui/wpf_grundlagen.html","title":"Grundlagen von WPF","text":""},{"location":"ui/wpf_grundlagen.html#aufbau-einer-wpf-anwendung","title":"Aufbau einer WPF-Anwendung","text":""},{"location":"ui/wpf_grundlagen.html#projektstruktur","title":"Projektstruktur","text":"<p>Eine typische WPF-Anwendung besteht aus mehreren Dateien und Ordnern, die zusammenarbeiten, um die Benutzeroberfl\u00e4che und die Gesch\u00e4ftslogik zu definieren. </p> <p>Die wichtigsten Bestandteile einer WPF-Anwendung sind:</p> <ul> <li>App.xaml und App.xaml.cs: Diese Dateien definieren die Anwendungsressourcen und das Startverhalten der Anwendung. <code>App.xaml</code> enth\u00e4lt allgemeine Ressourcen wie Stile und Vorlagen, w\u00e4hrend <code>App.xaml.cs</code> den Einstiegspunkt der Anwendung (Main-Methode) und Initialisierungslogik enth\u00e4lt.</li> </ul> <pre><code>&lt;!-- App.xaml --&gt;\n&lt;Application x:Class=\"WpfApp1.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             StartupUri=\"MainWindow.xaml\"&gt;\n    &lt;Application.Resources&gt;\n        &lt;!-- Ressourcen wie Stile, Vorlagen, etc. --&gt;\n    &lt;/Application.Resources&gt;\n&lt;/Application&gt;\n</code></pre> <pre><code>// App.xaml.cs\nusing System.Windows;\n\nnamespace WpfApp1\n{\n    public partial class App : Application\n    {\n    }\n}\n</code></pre> <ul> <li>MainWindow.xaml und MainWindow.xaml.cs: Diese Dateien definieren das Hauptfenster der Anwendung. <code>MainWindow.xaml</code> beschreibt das Layout und die Benutzeroberfl\u00e4che, w\u00e4hrend <code>MainWindow.xaml.cs</code> die Interaktionslogik f\u00fcr das Hauptfenster enth\u00e4lt.</li> </ul> <pre><code>&lt;!-- MainWindow.xaml --&gt;\n&lt;Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\"&gt;\n    &lt;Grid&gt;\n        &lt;!-- Benutzeroberfl\u00e4chen-Elemente --&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre> <pre><code>// MainWindow.xaml.cs\nusing System.Windows;\n\nnamespace WpfApp1\n{\n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n    }\n}\n</code></pre>"},{"location":"ui/wpf_grundlagen.html#hauptkomponenten","title":"Hauptkomponenten","text":"<p>Eine WPF-Anwendung besteht aus mehreren Hauptkomponenten, die zusammenarbeiten, um eine reiche Benutzererfahrung zu bieten:</p> <ul> <li> <p>Fenster (Window): Das grundlegende Container-Element f\u00fcr die Benutzeroberfl\u00e4che einer WPF-Anwendung. Fenster k\u00f6nnen mehrere UI-Elemente enthalten und unterst\u00fctzen Funktionen wie Gr\u00f6\u00dfen\u00e4nderung, Minimierung und Maximierung.</p> </li> <li> <p>Steuerelemente (Controls): UI-Elemente wie Buttons, TextBoxen, Labels, ListBoxen, etc., die in einem Fenster platziert werden k\u00f6nnen, um die Interaktion mit dem Benutzer zu erm\u00f6glichen. In der Toolbox auf der linken Seite des Visual Studio Fensters sehen Sie eine Auswahl der h\u00e4ufig verwendeten WPF-Steuerelemente.</p> </li> <li> <p>Layouts: Container-Elemente wie Grid, StackPanel, DockPanel, etc., die verwendet werden, um andere UI-Elemente in einer bestimmten Anordnung zu platzieren. Im <code>MainWindow.xaml</code> wird ein <code>Grid</code>-Layout verwendet, um die Benutzeroberfl\u00e4che zu strukturieren.</p> </li> </ul>"},{"location":"ui/wpf_grundlagen.html#beispielstruktur","title":"Beispielstruktur","text":"<p>Das Bild zeigt die typische Struktur einer WPF-Anwendung in Visual Studio:</p> Leeres Beispielprojekt <ul> <li>Toolbox: Enth\u00e4lt eine Liste der verf\u00fcgbaren Steuerelemente, die in die Benutzeroberfl\u00e4che gezogen und dort verwendet werden k\u00f6nnen. Wird diese nicht angezeigt, kann Sie entweder unter dem Men\u00fcpunkt \"Ansicht\" oder via Tastenkombination <code>Strg + W, X</code> eingeblendet werden.</li> <li>XAML-Editor und Designer: Der obere Bereich zeigt den visuellen Designer, in dem Sie die Benutzeroberfl\u00e4che visuell bearbeiten k\u00f6nnen. Der untere Bereich zeigt den XAML-Code, in dem Sie die Benutzeroberfl\u00e4che in XAML definieren k\u00f6nnen.</li> <li>Projektmappen-Explorer: Zeigt die Dateien und Ordner des Projekts. Hier sehen Sie die <code>App.xaml</code>, <code>MainWindow.xaml</code>, und deren zugeh\u00f6rige Code-Behind-Dateien.</li> </ul> <p>Info</p> <p>Die Projektstruktur und die Hauptkomponenten einer WPF-Anwendung sind entscheidend f\u00fcr die Organisation und Verwaltung des Codes. Eine klare Trennung von Layout (XAML) und Logik (C#) f\u00f6rdert die Wartbarkeit und Erweiterbarkeit der Anwendung.</p>"}]}